<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lenny的博客</title>
  
  <subtitle>所谓成功，就是不断的经历失败，并且始终保持热情。——丘吉尔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.imemv.com/"/>
  <updated>2017-11-22T09:10:24.149Z</updated>
  <id>http://blog.imemv.com/</id>
  
  <author>
    <name>Lenny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析Android Architecture Components</title>
    <link href="http://blog.imemv.com/2017/11/21/android-architecture-components/"/>
    <id>http://blog.imemv.com/2017/11/21/android-architecture-components/</id>
    <published>2017-11-21T06:29:03.000Z</published>
    <updated>2017-11-22T09:10:24.149Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdc.tencent.com/wp-content/uploads/2017/06/BE23475C-199C-4ECA-9A56-9DAA64BD3B42.png" alt=""></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Architecture Components 是谷歌官方提出的 Android应用框架。这个新的框架库旨在帮助我们设计健壮、可测试和和维护的应用程序。现在 1.0的正式版已经发布了，下面让我们通过实际构建来了解一下。<br><a id="more"></a></p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>在项目的build.gradle中添加 Google Maven Repository</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">        <span class="comment">// Architecture Components</span></div><div class="line">        maven &#123; url<span class="string">'https ://maven.google.com'</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在模块build.gradle中添加相关依赖</p><p>如使用Lifecycle、LiveData、ViewModel,添加如下依赖。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Architecture components</span></div><div class="line"><span class="keyword">implementation</span> <span class="string">'android.arch.lifecycle:runtime:1.0.3'</span></div><div class="line">annotationProcessor <span class="string">"android.arch.lifecycle:compiler:1.0.0"</span></div><div class="line"><span class="comment">// LiveData ViewModel</span></div><div class="line"><span class="keyword">implementation</span> <span class="string">'android.arch.lifecycle:extensions:1.0.0'</span></div></pre></td></tr></table></figure><p>如使用 Room功能，添加如下依赖</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// room</span></div><div class="line"><span class="keyword">implementation</span> <span class="string">'android.arch.persistence.room:runtime:1.0.0'</span></div><div class="line">annotationProcessor <span class="string">"android.arch.persistence.room:compiler:1.0.0"</span></div><div class="line"><span class="comment">// testing Room migrations add</span></div><div class="line">testImplementation <span class="string">'android.arch.persistence.room:testing:1.0.0'</span></div></pre></td></tr></table></figure><h3 id="构建用户界面"><a href="#构建用户界面" class="headerlink" title="构建用户界面"></a>构建用户界面</h3><p>现在有两个页面：商品列表和商品详情，列表界面由<strong>ProductListFragment</strong>和其对应的<strong>list_fragment</strong>组成<br>我们商品的数据模型如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Product</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function">String <span class="title">getName</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function">String <span class="title">getDescription</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们用派生于AndroidViewModel（AndroidViewModel 继承于ViewModel）的<strong>ProductListViewModel</strong>来存储上面的数据，并向fragment提供数据</p><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ViewModel是用来存储UI层的数据，以及管理对应的数据，当数据修改，马上刷新UI。</p><p>众所周知，Fragment和Activity本身需要处理很多用户的输入事件和操作系统打交道，如果还要花时间管理其数据的话，class文件就会变得异常大，这样的话如果进行单元测试或者更加多的功能的话，就会变得很臃肿和困难。</p><p>所以就有了MVC、MVP、MVVM等设计模式，将试图和数据分离，AAC中的ViewModel就是将数据从UI中分离出来，并且在页面重构的情况下，也能很好的管理数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ProductListViewModel</span> <span class="keyword">extends</span> <span class="title">AndroidViewModel</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *   MediatorLiveData can observe other LiveData objects and react on their emissions</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">MediatorLiveData</span>&lt;<span class="type">List</span>&lt;<span class="type">ProductEntity</span>&gt;&gt; mObservableProducts;</div><div class="line">    public <span class="type">ProductListViewModel</span>(<span class="meta">@NonNull</span> <span class="type">Application</span> application) &#123;</div><div class="line">        <span class="keyword">super</span>(application);</div><div class="line">        mObservableProducts = <span class="keyword">new</span> <span class="type">MediatorLiveData</span>&lt;&gt;();</div><div class="line">        mObservableProducts.setValue(<span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="type">LiveData</span>&lt;<span class="type">List</span>&lt;<span class="type">ProductEntity</span>&gt;&gt; products = ((<span class="type">MyApplication</span>)application).getRepository().getProducts();</div><div class="line"></div><div class="line">        mObservableProducts.addSource(products, mObservableProducts::setValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="type">LiveData</span>&lt;<span class="type">List</span>&lt;<span class="type">ProductEntity</span>&gt;&gt; getProducts() &#123;</div><div class="line">        <span class="keyword">return</span> mObservableProducts;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在修改fragment 让其和viewmodel进行绑定，观察数据的变化并及时更新UI</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> void onActivityCreated(<span class="meta">@Nullable</span> Bundle savedInstanceState) &#123;</div><div class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">    <span class="keyword">final</span> ProductListViewModel viewModel = ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(ProductListViewModel.<span class="keyword">class</span>);</div><div class="line"></div><div class="line">    subscribeUi(viewModel);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>观察数据的变化并更新UI</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">private</span> <span class="selector-tag">void</span> <span class="selector-tag">subscribeUi</span>(ProductListViewModel viewModel) &#123;</div><div class="line">    <span class="selector-tag">viewModel</span><span class="selector-class">.getProducts</span>()<span class="selector-class">.observe</span>(this, new Observer&lt;List&lt;ProductEntity&gt;&gt;() &#123;</div><div class="line">        <span class="variable">@Override</span></div><div class="line">        public void onChanged(<span class="variable">@Nullable</span> List&lt;ProductEntity&gt; productEntities) &#123;</div><div class="line">            <span class="selector-tag">if</span> (productEntities!= null) &#123;</div><div class="line">                <span class="selector-tag">mBinding</span><span class="selector-class">.setIsLoading</span>(false);</div><div class="line">                <span class="selector-tag">mProductAdapter</span><span class="selector-class">.setProductList</span>(productEntities);</div><div class="line">            &#125; <span class="selector-tag">else</span>  &#123;</div><div class="line">                <span class="selector-tag">mBinding</span><span class="selector-class">.setIsLoading</span>(true);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可能你会对其中的 很多东西不是很懂，不要着急，下面我会一一为其解答</p><h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><p><strong>LiveData</strong>持有可悲观察的数据（也就是我们<strong>ProductListViewModel</strong>中的<strong>mObservableProducts</strong>）,其中<strong>MediatorLiveData</strong>继承于<strong>LiveData</strong>。它使应用中的组件能在不于其存在明显依赖关系的前提下观察LiveData对象的改变。LiveData遵循应用组件的生命周期状态，并且能够阻止一下事情去阻止对象的内存泄漏。详情请阅<a href="https://developer.android.com/topic/libraries/architecture/livedata.html" target="_blank" rel="external">LiveData</a></p><p><strong>LiveData</strong>和<strong>ViewModel</strong>的区别：<br><img src="http://cdc.tencent.com/wp-content/uploads/2017/06/1498112166_94_w522_h543.png" alt=""></p><p><strong>ViewModel</strong>:是一个存储数据的组件模块，由<strong>ViewModelProvider</strong>管理，生命周期如上，除非Activity主动finish或者Fragment呗detached，它保存的在内存中的数据不会受配置改变的影响。</p><p><strong>LiveData</strong>：可以让数据具有可观察功能的一个类，无生命周期一说，只有在被观察者注册之后才能感知其生命周期，并在相应状态下做相应的处理，</p><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>在<strong>ProductListViewModel</strong>中，获取数据的方法是这样的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LiveData&lt;List&lt;ProductEntity<span class="meta">&gt;&gt; </span>products = ((MyApplication)application).getRepository().getProducts();</div></pre></td></tr></table></figure><p>在 MyApplication中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> DataRepository <span class="title">getRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> DataRepository.getInstance(getDatabase());</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>这里解释下Repository是做什么的，我们可以直接在ViewModel中去获取数据，功能少的话还是可以的，但是功能一多，我们扩展起来就会很难维护。另外 ViewMode和生命周期是和Fragment或者Activity绑定在一起的，我们很有可能在生命周期结束时丢掉所有的数据，这样体验就很不好了，所以，我们把这部分工作交给一个新的模块去完成<strong>Repository</strong>，让其处理数据的操作。（可以把其看成不同数据源之间的中间人）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataRepository</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataRepository sInstance;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppDatabase mDatabase;</div><div class="line">    <span class="keyword">private</span> MediatorLiveData&lt;List&lt;ProductEntity&gt;&gt; mObservableProducts;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataRepository</span><span class="params">(<span class="keyword">final</span> AppDatabase database)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDatabase = database;</div><div class="line">        mObservableProducts = <span class="keyword">new</span> MediatorLiveData&lt;&gt;();</div><div class="line"></div><div class="line">        mObservableProducts.addSource(mDatabase.productDao().loadAllProducts(),</div><div class="line">                productEntities -&gt; &#123;</div><div class="line">                    <span class="keyword">if</span> (mDatabase.getDatabaseCreated().getValue() != <span class="keyword">null</span>) &#123;</div><div class="line">                        mObservableProducts.postValue(productEntities);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataRepository <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> AppDatabase database)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (DataRepository.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> DataRepository(database);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;ProductEntity&gt;&gt; getProducts() &#123;</div><div class="line">        <span class="keyword">return</span> mObservableProducts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;ProductEntity&gt; <span class="title">loadProduct</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> productId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatabase.productDao().loadProduct(productId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> LiveData&lt;List&lt;CommentEntity&gt;&gt; loadComments(<span class="keyword">final</span> <span class="keyword">int</span> productId) &#123;</div><div class="line">        <span class="keyword">return</span> mDatabase.commentDao().loadComments(productId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h3><p>在上面的代码中可以看到一个这个类<strong>ProductEntity</strong>，这个就是在这里要说的<strong>Room</strong></p><p>Room是一个持久化工具，属于ORM工具。</p><p>Room主要分为三个部分：</p><ul><li>Entity</li></ul><p>使用注释表示一个数据库的一个表结构，每个字段表示一列</p><ul><li><p>DAO</p><p>Data Access Object的缩写，从代码中直接访问数据库，屏蔽sql语句</p></li><li><p>Database</p></li></ul><p>主要负责创建数据库以及获取数据对象的</p><p><img src="https://raw.githubusercontent.com/LiushuiXiaoxia/AndroidArchitectureComponents/master/doc/room_architecture.png" alt=""><br> 上图是官方给的结构图</p><h4 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h4><p> 我们先来看下<strong>ProductEntity</strong>的代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Entity</span>(tableName = <span class="string">"products"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEntity</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductEntity</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductEntity</span><span class="params">(<span class="keyword">int</span> id, String name, String description, <span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductEntity</span><span class="params">(Product product)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = product.getId();</div><div class="line">        <span class="keyword">this</span>.name = product.getName();</div><div class="line">        <span class="keyword">this</span>.description = product.getDescription();</div><div class="line">        <span class="keyword">this</span>.price = product.getPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> @Entity注解一个类，表示这是数据库的一张表，其中的 tableName 表示的就是表的名字<br> @PrimaryKey 标记的字段就是主键</p><p> 我们再来看下 详情的Entity</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Entity</span>(tableName = <span class="string">"comments"</span>,</div><div class="line">    foreignKeys = &#123;</div><div class="line">        <span class="meta">@ForeignKey</span>(entity = ProductEntity.class,</div><div class="line">        parentColumns = <span class="string">"id"</span>,</div><div class="line">        childColumns = <span class="string">"productId"</span>,</div><div class="line">                onDelete = ForeignKey.CASCADE)&#125;,</div><div class="line">indices = &#123;<span class="meta">@Index</span>(value = <span class="string">"productId"</span>)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentEntity</span> <span class="keyword">implements</span> <span class="title">Comment</span></span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span>(autoGenerate = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productId;</div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line">    <span class="keyword">private</span> Date postedAt;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProductId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> productId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPostedAt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> postedAt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductId</span><span class="params">(<span class="keyword">int</span> productId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.productId = productId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostedAt</span><span class="params">(Date postedAt)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.postedAt = postedAt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommentEntity</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> productId, String text, Date postedAt)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.productId = productId;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">        <span class="keyword">this</span>.postedAt = postedAt;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommentEntity</span> <span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> indices的参数值是@Index的数组,是为了加快查询素的的索引</p><p> foreignKeys的参数值ForeignKey的值是所属的外键</p><p> onDelete = ForeignKey.CASCADE 级联删除</p><h4 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h4><p>我们看下DAO的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM products"</span>)</div><div class="line">    LiveData&lt;List&lt;ProductEntity&gt;&gt; loadAllProducts();</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span>(onConflict = OnConflictStrategy.REPLACE)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAll</span><span class="params">(List&lt;ProductEntity&gt; products)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select * from products where id = :productId"</span>)</div><div class="line">    <span class="function">LiveData&lt;ProductEntity&gt; <span class="title">loadProduct</span><span class="params">(<span class="keyword">int</span> productId)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select * from products where id = :productId"</span>)</div><div class="line">    <span class="function">ProductEntity <span class="title">loadProductSync</span><span class="params">(<span class="keyword">int</span> productId)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用DAO注解的接口是通过方法对数据库进行增删改查的接口，运行时Room会自己创建其实体类</p><p>@Query 查询 @Inser 插入 @Update 更新 @Delete 删除</p><p>里面的参数都是一些常用的sql语句</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>有时候Java定义的数据类型和数据库中存储的数据类型是不一样的，Room提供类型转换，可以自动转换操作数据库中的数据。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> </span>&#123;</div><div class="line">    <span class="meta">@TypeConverter</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Date <span class="title">toDate</span><span class="params">(Long timestamp)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> timestamp == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> Date(timestamp);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@TypeConverter</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Long <span class="title">toTimestamp</span><span class="params">(Date date)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> date == <span class="keyword">null</span> ? <span class="keyword">null</span> : date.getTime();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><p> Database是将上述所有的表集合起来，创建一个数据库</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Database</span>(entities = &#123;ProductEntity.class, CommentEntity.class&#125;, version = <span class="number">1</span>, exportSchema = <span class="keyword">false</span>)</div><div class="line"><span class="meta">@TypeConverters</span>(DateConverter.class)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppDatabase sInstance;</div><div class="line">    <span class="meta">@VisibleForTesting</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"basic-sample-db"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ProductDao <span class="title">productDao</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> CommentDao <span class="title">commentDao</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MutableLiveData&lt;Boolean&gt; mIsDatabaseCreated = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppDatabase <span class="title">getsInstance</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> AppExecutors executors)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (AppDatabase.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                   sInstance = buildDatabase(context.getApplicationContext(), executors);</div><div class="line">                   sInstance.updateDatabaseCreated(context.getApplicationContext());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AppDatabase <span class="title">buildDatabase</span><span class="params">(<span class="keyword">final</span> Context appContext, <span class="keyword">final</span> AppExecutors executors)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Room.databaseBuilder(appContext, AppDatabase.class, DATABASE_NAME)</div><div class="line">                .addCallback(<span class="keyword">new</span> Callback() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@NonNull SupportSQLiteDatabase db)</span> </span>&#123;</div><div class="line">                        <span class="keyword">super</span>.onCreate(db);</div><div class="line">                        executors.diskIO().execute(() -&gt; &#123;</div><div class="line">                            addDelay();</div><div class="line">                            AppDatabase database = AppDatabase.getsInstance(appContext, executors);</div><div class="line">                            List&lt;ProductEntity&gt; products = DataGenerator.generateProducts();</div><div class="line">                            List&lt;CommentEntity&gt; comments = DataGenerator.generateCommentsForProducts(products);</div><div class="line">                            insertData(database, products, comments);</div><div class="line">                            database.setDatabaseCreated();</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;).build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Check whether the database already exists and expose it via</div><div class="line">     */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateDatabaseCreated</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (context.getDatabasePath(DATABASE_NAME).exists()) &#123;</div><div class="line">            setDatabaseCreated();</div><div class="line">        &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDatabaseCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        mIsDatabaseCreated.postValue(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertData</span><span class="params">(<span class="keyword">final</span> AppDatabase database, <span class="keyword">final</span> List&lt;ProductEntity&gt; products, <span class="keyword">final</span> List&lt;CommentEntity&gt; comments)</span> </span>&#123;</div><div class="line">       database.runInTransaction(() -&gt; &#123;</div><div class="line">           database.productDao().insertAll(products);</div><div class="line">           database.commentDao().insertAll(comments);</div><div class="line">       &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDelay</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">4000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> LiveData&lt;Boolean&gt; <span class="title">getDatabaseCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> mIsDatabaseCreated;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Database的entities参数是所有的表的集合 version是数据库的版本号</p><p>其中主要的方法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Room</span><span class="selector-class">.databaseBuilder</span>(<span class="selector-tag">appContext</span>, <span class="selector-tag">AppDatabase</span><span class="selector-class">.class</span>, <span class="selector-tag">DATABASE_NAME</span>)</div><div class="line">                <span class="selector-class">.addCallback</span>(...)<span class="selector-class">.build</span>();</div></pre></td></tr></table></figure><p>创建Database对象<br>更多详细内容请阅<a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="external">Room</a></p><p>项目演示效果：<br><img src="http://img.blog.csdn.net/20170611043821796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHViaW5xaWFuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里贴一下各个模块的框架之间交互图</p><p><img src="http://cdc.tencent.com/wp-content/uploads/2017/06/1498112207_65_w960_h720-1.png" alt=""></p><p>框架补充：</p><ul><li>如果不满足官方的库其实可以自己实现。比如LiveData在某些情况下可使用RxJava代替。</li><li>数据层官方推荐使用Room或者Realm或者其他Sqlite ORM等都可以。</li><li>网络请求推荐使用Retrofit。</li><li>各层之间的耦合推荐使用服务发现(Service Locator)或者依赖注入(DI)，推荐Dagger。</li></ul><p>AAC框架的基础内容就是这些。如果想详细了解请阅读官方介绍。</p><p>题外话：要想真正学会某些知识，应该分为三部： 会用、懂为什么这么用、知道怎么修改。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="external">Android Architecture Components</a></p><p><a href="http://cdc.tencent.com/2017/06/29/%E5%9F%BA%E4%BA%8Eandroid-architecture-components%E7%9A%84%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%8C%87%E5%8D%97/" target="_blank" rel="external">基于Android Architecture Components的应用架构指南</a></p><p><a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="external">官方示例地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdc.tencent.com/wp-content/uploads/2017/06/BE23475C-199C-4ECA-9A56-9DAA64BD3B42.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Architecture Components 是谷歌官方提出的 Android应用框架。这个新的框架库旨在帮助我们设计健壮、可测试和和维护的应用程序。现在 1.0的正式版已经发布了，下面让我们通过实际构建来了解一下。&lt;br&gt;
    
    </summary>
    
      <category term="Android框架" scheme="http://blog.imemv.com/categories/Android%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
      <category term="框架" scheme="http://blog.imemv.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="architecture components" scheme="http://blog.imemv.com/tags/architecture-components/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之反射</title>
    <link href="http://blog.imemv.com/2017/11/07/java-reflection/"/>
    <id>http://blog.imemv.com/2017/11/07/java-reflection/</id>
    <published>2017-11-07T05:54:58.000Z</published>
    <updated>2017-11-07T10:07:04.325Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img3.imgtn.bdimg.com/it/u=1895848224,2236181931&amp;fm=27&amp;gp=0.jpg" alt=""></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>所谓工欲善其事必先利其器，只有把脚下的每一步走好，才能走的更远，只有把地基打的牢固，才能盖的更高。今天我来给大家讲讲java中的反射，如有错误请指出。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>反射（Reflection）是java开发语言的特性之一，官方对其的解释：</p><pre><code>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.</code></pre><a id="more"></a><p>简而言之，我们可以通过反射知道这个类中的方法和属性，我们也可以调用其的方法和属性。</p><p>反射的核心是JVM在运行时才动态加载类或者调用方法/访问属性，不需要事先知道运行的对象是谁</p><p><strong>反射机制的功能</strong></p><ol><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的方法；</li><li>动态代理；</li></ol><p><strong>应用的场景</strong></p><p> 很多人会觉得反射在实际应用中用到的不是很广泛，其实不然，像我们最期的json解析框架Gson就是通过反射来动态的程程类框架，还有EventBus（单纯的反射机制应用框架）、Retrofit、rxjava以及我们反编译的话也是需要用过反射的。</p><h3 id="基本运用"><a href="#基本运用" class="headerlink" title="基本运用"></a>基本运用</h3><p>Java反射机制要借助4个类：Class、Constructor、Field、Method</p><h4 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h4><p>有三种方法</p><ol><li>通过Class类的静态方法forName，其参数是完整的包名。</li></ol><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Class</span> c = <span class="keyword">Class</span>.forName(<span class="string">"com.example.Person"</span>);</div></pre></td></tr></table></figure><ol><li>通过类的class属性来获得Class对象</li></ol><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Class</span> c1 = Person.<span class="keyword">class</span><span class="comment">;</span></div></pre></td></tr></table></figure><ol><li>通过具体实例的getClass方法获得Class对象</li></ol><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">Class</span> c2 = <span class="function"><span class="keyword">new</span> <span class="title">Person</span>().<span class="title">getClass</span>();</span></div></pre></td></tr></table></figure><h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">Method</span> [] <span class="title">methods</span> = <span class="title">c</span>.<span class="title">getDeclaredMethods</span><span class="params">()</span>;</span> <span class="comment">// 获取对象的所有方法,但是不包括继承的方法</span></div><div class="line"><span class="function"><span class="keyword">Method</span> [] <span class="title">methods1</span> = <span class="title">c</span>.<span class="title">getMethods</span><span class="params">()</span>;</span> <span class="comment">// 获取对象的所有公共方法，包括继承的公共方法</span></div><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">method</span> = <span class="title">c</span>.<span class="title">getDeclaredMethod</span><span class="params">("<span class="keyword">method</span>", Void.<span class="keyword">class</span>)</span>;</span> <span class="comment">//获取对象指定的方法</span></div><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">method1</span> = <span class="title">c</span>.<span class="title">getMethod</span><span class="params">("method1", Void.<span class="keyword">class</span>)</span>;</span> <span class="comment">// 获取对象指定的公共方法</span></div></pre></td></tr></table></figure><p>后面两个方法的参数，分别是对象方法的名字以及其参数的class类型</p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Field [] fields = c.getDeclaredFields(); <span class="comment">// 获得对象的所有属性，不包括父类的方法</span></div><div class="line"></div><div class="line">Field [] fields1 = c.getFields(); <span class="comment">// 获取对象的所有公共属性</span></div><div class="line"></div><div class="line">Field field = c.getField(<span class="string">"a"</span>);<span class="comment">// 获取对象指定的属性</span></div><div class="line"></div><div class="line">Field field1 = c.getDeclaredField(<span class="string">"b"</span>);<span class="comment">// 获取对象指定的公共属性</span></div></pre></td></tr></table></figure><h4 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">Constructor</span>&lt;?&gt; [] <span class="title">constructors</span> = <span class="title">c</span>.<span class="title">getDeclaredConstructors</span><span class="params">()</span>;</span> <span class="comment">// 获取class对象所有声明的构造函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">Constructor</span>&lt;?&gt; [] <span class="title">constructors1</span> = <span class="title">c</span>.<span class="title">getConstructors</span><span class="params">()</span>;</span> <span class="comment">// 获取class对象所有public构造函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">Constructor</span>&lt;?&gt; <span class="title">constructor</span> = <span class="title">c</span>.<span class="title">getDeclaredConstructor</span><span class="params">(Void.<span class="keyword">class</span>)</span>;</span> <span class="comment">// 获取指定声明的构造函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">Constructor</span>&lt;?&gt; <span class="title">constructor1</span> = <span class="title">c</span>.<span class="title">getConstructor</span><span class="params">(Void.<span class="keyword">class</span>)</span>;</span> <span class="comment">// 获取指定声明的public构造函数</span></div></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Annotation [] annotations = (Annotation[]) c.getAnnotations(); <span class="regexp">//</span>获取所有注解</div><div class="line"></div><div class="line">Annotation annotation = c.getAnnotation(Deprecated.<span class="keyword">class</span>); <span class="regexp">//</span> 获取指定注解</div><div class="line"></div><div class="line">Type genericSuperclass = c.getGenericSuperclass();<span class="regexp">//</span>获取<span class="class"><span class="keyword">class</span>对象的直接超类的 <span class="title">Type</span></span></div><div class="line"></div><div class="line">Type[] interfaceTypes = c.getGenericInterfaces();<span class="regexp">//</span>获取<span class="class"><span class="keyword">class</span>对象的所有接口的<span class="title">type</span>集合</span></div><div class="line"></div><div class="line">boolean isInterface = c.isInterface();<span class="regexp">//</span>判断是否是接口类</div><div class="line"></div><div class="line">String className = c.getName();<span class="regexp">//</span>获取<span class="class"><span class="keyword">class</span>名字 包含包名路径</span></div><div class="line"></div><div class="line">Package aPackage = c.getPackage();<span class="regexp">//</span>获取<span class="class"><span class="keyword">class</span>的包信息</span></div><div class="line"></div><div class="line">String simpleName = c.getSimpleName();<span class="regexp">//</span>获取<span class="class"><span class="keyword">class</span>类名</span></div></pre></td></tr></table></figure><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>我们获得一个Method方法后，可以通过invoke方法来调用这个方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> obj, <span class="keyword">Object</span>... args)</div><div class="line">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</div><div class="line">           InvocationTargetException</div></pre></td></tr></table></figure><p>例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class c = Class.forName(<span class="string">"com.example.Person"</span>);</div><div class="line">            Object o = c.newInstance();</div><div class="line">            Method method = c.getDeclaredMethod(<span class="string">"method"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</div><div class="line">            Object <span class="keyword">object</span> = method.invoke(o, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="keyword">object</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Person</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span>(<span class="params"><span class="keyword">int</span> i, <span class="keyword">int</span> j</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> i + j;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用invoke来调用方法时，要求有调用这个方法的权限，如果需要调用对象中的private方法，则需要先调用 <code>setAccessible(true)</code>方法，取消访问权限的检查。</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理是属于代理模式的一种，那我们先从代理模式开始说起。<br>定义： 为其他对象提供一种代理以控制对这个对象的访问。</p><p>例子：明星拍广告，要和经纪人沟通。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Agent mAgent = <span class="keyword">new</span> Agent(<span class="keyword">new</span> Star());</div><div class="line">        mAgent.shootAdvertisement();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"拍广告。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">// 经纪人 ，代理类</span></div><div class="line">    <span class="keyword">private</span> Subject star = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 设置被代理类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Subject star)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.star = star;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">before</span>();</div><div class="line">        star.shootAdvertisement();</div><div class="line">        <span class="keyword">after</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"处理拍广告之前的各项工作"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"处理拍广告之后的善后工作"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代理模式分为：</p><ul><li><p>静态代理模式</p><ul><li>普通代理模式</li><li>强制带离模式</li></ul></li><li><p>动态代理模式</p></li></ul><p>普通代理模式：要求客户端只能访问代理角色，而不能访问真实角色。</p><p>例子：游戏代练</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        GameProxy gameProxy = <span class="keyword">new</span> GameProxy(<span class="string">"Miss"</span>);</div><div class="line">        gameProxy.login();</div><div class="line">        gameProxy.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(IGamePlayer gamePlayer, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (gamePlayer == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不能创建对象"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"-登录成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"升级了！！！！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> GamePlayer mGamePlayer = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mGamePlayer = <span class="keyword">new</span> GamePlayer(<span class="keyword">this</span>, name);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        mGamePlayer.login();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        mGamePlayer.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="强制代理"><a href="#强制代理" class="headerlink" title="强制代理"></a>强制代理</h6><p>必须通过真实角色找到代理角色，否则无法访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        GamePlayer player = <span class="keyword">new</span> GamePlayer(<span class="string">"Miss"</span>);</div><div class="line">        player.login();</div><div class="line">        player.upgrade();</div><div class="line">        GameProxy proxy = <span class="keyword">new</span> GameProxy(player.getPlayer());</div><div class="line">        proxy.login();</div><div class="line">        proxy.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">IGamePlayer <span class="title">getPlayer</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IGamePlayer player;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.player == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isProxy()) &#123;</div><div class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">"-登录成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"请使用代理访问"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isProxy()) &#123;</div><div class="line">            System.out.println(<span class="string">"升级了！！！！"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"请使用代理访问"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.player = <span class="keyword">new</span> GameProxy(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.player;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IGamePlayer gamePlayer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(IGamePlayer gamePlayer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer = gamePlayer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer.login();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer.upgrade();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">请使用代理访问</div><div class="line">请使用代理访问</div><div class="line"><span class="built_in">Miss</span>-登录成功</div><div class="line">升级了！！！！</div></pre></td></tr></table></figure><h6 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h6><p>动态代理：实现阶段不用关系代理是哪个，而在运行阶段指定具体哪个代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        IGamePlayer mGamePlayer = <span class="keyword">new</span> GamePlayer(<span class="string">"Miss"</span>);</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> GameProxy(mGamePlayer);</div><div class="line">        <span class="comment">//生成一个代理者</span></div><div class="line">        <span class="comment">// ClassLoader: 指定当前目标对象使用类加载器</span></div><div class="line">        <span class="comment">// Class&lt;?&gt; [] interface: 目标对象实现接口的类型</span></div><div class="line">        <span class="comment">// InvocationHandler: 事件处理，执行目标对象的方法时，会触发事件处理器的方法。</span></div><div class="line">        IGamePlayer player = (IGamePlayer) Proxy.newProxyInstance(mGamePlayer.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;IGamePlayer.class&#125;, handler);</div><div class="line">        player.login(<span class="string">"Miss"</span>, <span class="string">"123456a"</span>);</div><div class="line">        player.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">        System.out.println(name + <span class="string">"登录成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"升级了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"><span class="comment">// 被代理的对象</span></div><div class="line">    <span class="keyword">private</span> Object obj;</div><div class="line"><span class="comment">// 将需要代理的实例通过构造方法传递给代理</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (method.getName().equalsIgnoreCase(<span class="string">"login"</span>)) &#123;</div><div class="line">        <span class="comment">// 在这个方法不收影响的情况下，在方法的前后添加新的功能</span></div><div class="line">        <span class="comment">// 从侧面切入从而达到扩展的效果的编程，就是面向切面编程（AOP Aspect Oriented Programming）</span></div><div class="line">            System.out.println(<span class="string">"代理登录了"</span>);</div><div class="line">            Object result = method.invoke(<span class="keyword">this</span>.obj, objects);</div><div class="line">            <span class="keyword">return</span>  result;</div><div class="line">        &#125;</div><div class="line">        Object result = method.invoke(<span class="keyword">this</span>.obj, objects);</div><div class="line">        <span class="keyword">return</span>  result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>动态代理模式的一般模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Subject subject = <span class="keyword">new</span> MySubject();</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject);</div><div class="line">        ClassLoader loader = subject.getClass().getClassLoader();</div><div class="line">        Class &lt;?&gt;[] in = subject.getClass().getInterfaces();</div><div class="line">        Subject s = DynamicProxy.newProxyInstance(loader, in, handler);</div><div class="line">        s.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"吃饭睡觉打豆豆"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"前置方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfterAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"后置方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject mySubject;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Subject mySubject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mySubject = mySubject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Advice beforeAdvice = <span class="keyword">new</span> BeforeAdvice();</div><div class="line">        beforeAdvice.exec();</div><div class="line">        Object result = method.invoke(<span class="keyword">this</span>.mySubject, objects);</div><div class="line">        Advice afterAdvice = <span class="keyword">new</span> AfterAdvice();</div><div class="line">        afterAdvice.exec();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(ClassLoader classLoader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</span></span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        T t = (T) Proxy.newProxyInstance(classLoader, interfaces, handler);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>反射的知识就大概讲这么多，这里知识简单的说了下它的基本的使用，其实我们用的最多的就是invoke方法，以后有时间我会把这部分再补充上的。反射和泛型结合起来，效果很更好。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p> <a href="https://www.zhihu.com/question/24304289" target="_blank" rel="external">学习java应该如何理解反射</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img3.imgtn.bdimg.com/it/u=1895848224,2236181931&amp;amp;fm=27&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;所谓工欲善其事必先利其器，只有把脚下的每一步走好，才能走的更远，只有把地基打的牢固，才能盖的更高。今天我来给大家讲讲java中的反射，如有错误请指出。&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;反射（Reflection）是java开发语言的特性之一，官方对其的解释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.
The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.imemv.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://blog.imemv.com/tags/Java/"/>
    
      <category term="反射" scheme="http://blog.imemv.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="基础" scheme="http://blog.imemv.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android需要掌握的设计模式（复习篇）</title>
    <link href="http://blog.imemv.com/2017/10/12/design-pattern/"/>
    <id>http://blog.imemv.com/2017/10/12/design-pattern/</id>
    <published>2017-10-12T03:46:20.000Z</published>
    <updated>2017-10-24T08:31:33.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img0.imgtn.bdimg.com/it/u=2377589951,1785081828&amp;fm=214&amp;gp=0.jpg" alt=""></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在上一篇<a href="https://lennyup.github.io/2017/09/22/android-java/" target="_blank" rel="external">android需要的Java基础（复习篇）</a>中，我把Java的三大特性以及六大原则进行了一一复习总结，我打算这几天把设计模式进行下复习梳理，<code>设计模式</code>这个老生常谈的东西，在以往的面试题以及面试中会经常问到，关于设计模式，网上有很多文章对其进行阐述。在这里，我只是通过自己的理解，把我所知道的写出来,文章很长，建议先收藏起来，慢慢看（ps：<code>_(:з」∠)_</code>轻喷）。<br><a id="more"></a></p><h3 id="—、设计模式的分类"><a href="#—、设计模式的分类" class="headerlink" title="—、设计模式的分类"></a>—、设计模式的分类</h3><p>总的来说，设计模式分为三种：创建模式、结构模式、行为模式</p><h4 id="1-创建模式"><a href="#1-创建模式" class="headerlink" title="1. 创建模式"></a>1. 创建模式</h4><p>创建模式：提供实例化的方法，为适合的状况提供相应的对象创建方法。</p><p>其中属于创建模式的是：单例模式、建造者模式、工厂方法模式、抽象工厂模式、原型模式。</p><h5 id="1-单例模式（Singleton-Pattern）"><a href="#1-单例模式（Singleton-Pattern）" class="headerlink" title="1.单例模式（Singleton Pattern）"></a>1.单例模式（Singleton Pattern）</h5><p>定义：确保一个类中有且只有一个实例，而且自行实例化。</p><p>这里可以去看我之前写的<a href="http://www.jianshu.com/p/1d928cdf40e8" target="_blank" rel="external">如何写出一个好的单例模式</a></p><h5 id="2-建造者模式-（Builder-Pattern）"><a href="#2-建造者模式-（Builder-Pattern）" class="headerlink" title="2.建造者模式 （Builder Pattern）"></a>2.建造者模式 （Builder Pattern）</h5><p>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>更多内容请看 <a href="https://lennyup.github.io/2017/04/20/android-builder/" target="_blank" rel="external">浅析builder模式</a></p><h5 id="3-工厂方法模式（Factory-Method-Pattern）"><a href="#3-工厂方法模式（Factory-Method-Pattern）" class="headerlink" title="3.工厂方法模式（Factory Method Pattern）"></a>3.工厂方法模式（Factory Method Pattern）</h5><p>定义：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p><p>下面引入一个简单工厂模式：<br>肉制品加工厂加工不同的肉制品。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定一个抽象方法用来生产肉制品</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">public <span class="keyword">abstract</span> void method();</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuttonProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void mothod() &#123;</div><div class="line"><span class="type">System</span>.out.println(<span class="string">"生产出来了羊肉...."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PorkProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void mothod() &#123;</div><div class="line"><span class="type">System</span>.out.println(<span class="string">"生产出来了猪肉...."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">public <span class="keyword">abstract</span> &lt;<span class="type">T</span> <span class="keyword">extends</span> <span class="type">Product</span>&gt; <span class="type">T</span> createProduce(<span class="type">Class</span>&lt;<span class="type">T</span>&gt; product);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span></span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 传入的参数，是Product类的子类。</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line">public &lt;<span class="type">T</span> <span class="keyword">extends</span> <span class="type">Product</span>&gt; <span class="type">T</span> createProduce(<span class="type">Class</span>&lt;<span class="type">T</span>&gt; product) &#123;</div><div class="line"><span class="type">Product</span> p = <span class="literal">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//Class类创建一个 工厂类实例</span></div><div class="line">p = (<span class="type">Product</span>) <span class="type">Class</span>.forName(product.getName()).newInstance();</div><div class="line">&#125; <span class="keyword">catch</span> (<span class="type">Exception</span> e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> (<span class="type">T</span>) p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line"><span class="comment">//通过创建子类对象，将接口实例化。</span></div><div class="line"><span class="type">Creator</span> cFactory = <span class="keyword">new</span> <span class="type">OneCreator</span>();</div><div class="line"><span class="comment">//通过子类的方法，创建一个需要的对象。</span></div><div class="line"><span class="type">ForkProduct</span> food  = cFactory.createProduce(<span class="type">ForkProduct</span>.<span class="keyword">class</span>);</div><div class="line">food.mothod();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Product, 抽象类，表示不同的肉制品。</p><p>PorkProduct,实现类，继承Product。</p><p>MuttonProduct，同上。</p><p>Creator抽象工厂类，提供加工方法。</p><p>OneCreator实现类，加工不同的肉制品。</p><p>工厂模式的优点：</p><ol><li>代码机构清晰，有很好的封装性。降低了模块间的耦合性。</li><li>有很好的扩展性。</li><li>屏蔽产品类，产品类对外提供的是一个接口，只要接口不改变系统中的上层模块就不会发生改变。</li></ol><p>#####扩展</p><h6 id="1-替代单例"><a href="#1-替代单例" class="headerlink" title="1.替代单例"></a>1.替代单例</h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">SingtonFactory</span> &#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton single;</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Class c = Class.forName(Singleton.class.getName());</div><div class="line"><span class="comment">//获取无参构造</span></div><div class="line">Constructor&lt;Singleton&gt; constractor = c.getDeclaredConstructor();</div><div class="line"><span class="comment">//设置无参构造是可访问的</span></div><div class="line">constractor.setAccessible(<span class="literal">true</span>);</div><div class="line"><span class="comment">//产生一个实例对象</span></div><div class="line">single = constractor.newInstance();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"创建失败。。。"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Singleton <span class="title">getSingle</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> single;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</div><div class="line"><span class="comment">//构造私有化</span></div><div class="line"><span class="keyword">private</span> Singleton &#123;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> (<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"sington。。。。"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="2-延迟初始化"><a href="#2-延迟初始化" class="headerlink" title="2.延迟初始化"></a>2.延迟初始化</h6><p>一个对象被使用完毕，并不立刻释放，保持其初始状态，等待再次被使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuttonProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mothod</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"生产出来了羊肉...."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PorkProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mothod</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"生产出来了猪肉...."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduce</span><span class="params">(String type)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Product&gt; map = <span class="keyword">new</span> HashMap&lt;String,Product&gt;();</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduce</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">Product p = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(map.containsKey(type)) &#123;</div><div class="line">p = map.get(type);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span>(type.equals(<span class="string">"pork"</span>)) &#123;</div><div class="line">p = <span class="keyword">new</span> PorkProduct();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">p = <span class="keyword">new</span> MuttonProduct();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">map.put(type, p);</div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">Product p = <span class="keyword">new</span> OneCreator().createProduce(<span class="string">"pork"</span>);</div><div class="line">p.mothod();</div><div class="line">System.out.println(<span class="string">"------------------------------"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="4-抽象工厂模式-Abstract-Factory"><a href="#4-抽象工厂模式-Abstract-Factory" class="headerlink" title="4.抽象工厂模式(Abstract Factory)"></a>4.抽象工厂模式(Abstract Factory)</h5><p>定义：为创建一组相关或相互依赖的对象提供一个接口，而且无须指定他们的具体类。</p><p>抽象工厂模式是工厂模式的升级版，针对的是多业务类型。</p><p>通用模式：</p><p><img src="https://box.kancloud.cn/2016-06-06_57553408a03ce.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        IProduct p1 = <span class="keyword">new</span> Creator1();</div><div class="line">        ProductA1 a1 = (ProductA1) p1.createA();</div><div class="line">        a1.method();</div><div class="line">        IProduct p2 = <span class="keyword">new</span> Creator();</div><div class="line">        ProductB1 b1 = (ProductB1) p2.createB();</div><div class="line">        b1.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareMethod</span> <span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产产品共同的方法"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareMethod</span> <span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产产品共同的方法"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line">    <span class="function">AbstractProductA <span class="title">createA</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">AbstractProductB <span class="title">createB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产A1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产A2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产B1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span>  <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"生产B2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator1</span> <span class="keyword">implements</span> <span class="title">IProduct</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> <span class="keyword">implements</span> <span class="title">IProduct</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>抽象工厂模式 一般是 一个接口，多个抽象类，n个实现类，从上面的代码可以看出它除了有工厂方法模式的优点外，还可以在类的内部对产品族进行约束。所谓产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。</p><p>抽象工厂模式的缺点也是显而易见的，就是产品族的扩展比较困难。</p><h5 id="5-原型模式"><a href="#5-原型模式" class="headerlink" title="5.原型模式"></a>5.原型模式</h5><p>定义：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>java提供了一个Cloneable接口，来标示这个类是可拷贝的，通过该接口中的clone方法对对象进行拷贝。</p><p>例子：某电商平台双十一搞活动，需要群发邮件通知。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyClass &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> [] args) &#123;</div><div class="line">        Mail mail = <span class="keyword">new</span> Mail(<span class="keyword">new</span> Template());</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            <span class="built_in">try</span> &#123;</div><div class="line">                Mail cMail = (Mail) mail.clone();</div><div class="line">                cMail.setReceiver(getReceiver(<span class="number">6</span>) + <span class="string">".com"</span>);</div><div class="line">                sendMail(cMail);</div><div class="line">            &#125; <span class="built_in">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> sendMail(Mail cMail) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"收件人"</span> + cMail.getReceiver() + <span class="string">"发送成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> getReceiver(<span class="keyword">int</span> i) &#123;</div><div class="line">        <span class="keyword">String</span> s = <span class="string">"abcdefghijklmnopqrstuvwxz"</span>;</div><div class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> j =<span class="number">0</span> ;j &lt;= i; j++) &#123;</div><div class="line">            sb.append(s.charAt(<span class="built_in">random</span>.nextInt(s.length())));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Template &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> subject = <span class="string">"双十一优惠活动"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> context = <span class="string">"双十一优惠活动，全场满99减5元"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getSubject() &#123;</div><div class="line">        <span class="built_in">return</span> subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setSubject(<span class="keyword">String</span> subject) &#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getContext() &#123;</div><div class="line">        <span class="built_in">return</span> context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setContext(<span class="keyword">String</span> context) &#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> Mail implements Cloneable &#123;</div><div class="line">    <span class="comment">// 收件人</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> receiver;</div><div class="line">    <span class="comment">//标题</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> subject;</div><div class="line">    <span class="comment">// 内容</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> context;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Mail(Template <span class="keyword">template</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.subject = <span class="keyword">template</span>.getSubject();</div><div class="line">        <span class="keyword">this</span>.context = <span class="keyword">template</span>.getContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getReceiver() &#123;</div><div class="line">        <span class="built_in">return</span> receiver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setReceiver(<span class="keyword">String</span> receiver) &#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getSubject() &#123;</div><div class="line">        <span class="built_in">return</span> subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setSubject(<span class="keyword">String</span> subject) &#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getContext() &#123;</div><div class="line">        <span class="built_in">return</span> context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setContext(<span class="keyword">String</span> context) &#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 重写 clone</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">protected</span> Object clone() throws CloneNotSupportedException &#123;</div><div class="line">        Mail mail = (Mail) super.clone();</div><div class="line">        <span class="built_in">return</span> mail;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原型模式是内存二进制流的法拷贝，比new一个新的对象好的多。</p><p>原型模式是从内存中拷贝，构造函数是不会执行的。拷贝分为浅拷贝和深拷贝，浅拷贝只是拷贝对象，其对象内部的数组、引用对象都不会拷贝。</p><p>原型模式需要注意的是：出现final的对象或变量，不能clone</p><p>深拷贝的例子：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</div><div class="line"><span class="comment">//创建一个对象</span></div><div class="line">MyClone myClone = <span class="keyword">new</span> <span class="type">MyClone</span>();</div><div class="line">myClone.setArrayList(<span class="string">"abs"</span>);</div><div class="line"><span class="comment">//将该对象clone。</span></div><div class="line">MyClone clone2 = (MyClone) myClone.clone();</div><div class="line">clone2.setArrayList(<span class="string">"gh"</span>);</div><div class="line"><span class="comment">//输出原对象的结果。</span></div><div class="line">System.out.println(<span class="string">"原对象...."</span>+myClone.getArrayList());</div><div class="line"><span class="comment">//输出拷贝后的结果。</span></div><div class="line">System.out.println(<span class="string">"拷贝结果...."</span>+clone2.getArrayList());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClone</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Cloneable</span></span></span>&#123;</div><div class="line"><span class="keyword">private</span> ArrayList&lt;<span class="keyword">String</span>&gt; arrayList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="keyword">String</span>&gt;();</div><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">@Override</div><div class="line"><span class="keyword">public</span> MyClone clone()&#123;</div><div class="line">MyClone myClone =<span class="literal">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">myClone = (MyClone) <span class="keyword">super</span>.clone();</div><div class="line"><span class="comment">//把私有对象也进行拷贝。做到深拷贝的效果</span></div><div class="line">myClone.arrayList = (ArrayList&lt;<span class="keyword">String</span>&gt;) <span class="built_in">this</span>.arrayList.clone();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> myClone;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> ArrayList&lt;<span class="keyword">String</span>&gt; getArrayList() &#123;</div><div class="line"><span class="keyword">return</span> arrayList;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> void setArrayList(<span class="keyword">String</span> name) &#123;</div><div class="line"><span class="built_in">this</span>.arrayList.add(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">原对象....[abs]</div><div class="line">拷贝结果....[abs, gh]</div></pre></td></tr></table></figure></p><h4 id="2-结构模式"><a href="#2-结构模式" class="headerlink" title="2.结构模式"></a>2.结构模式</h4><p>结构模式：通常用来处理实体之间的关系，使得这些实体能够更好地协同工作。</p><p>其中属于结构模式的是：装饰模式、适配器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><h5 id="1-代理模式（Proxy-Pattern）"><a href="#1-代理模式（Proxy-Pattern）" class="headerlink" title="1.代理模式（Proxy Pattern）"></a>1.代理模式（Proxy Pattern）</h5><p>定义： 为其他对象提供一种代理以控制对这个对象的访问。</p><p>例子：明星拍广告，要和经纪人沟通。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Agent mAgent = <span class="keyword">new</span> Agent(<span class="keyword">new</span> Star());</div><div class="line">        mAgent.shootAdvertisement();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"拍广告。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">// 经纪人 ，代理类</span></div><div class="line">    <span class="keyword">private</span> Subject star = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 设置被代理类</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Subject star)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.star = star;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">shootAdvertisement</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">before</span>();</div><div class="line">        star.shootAdvertisement();</div><div class="line">        <span class="keyword">after</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"处理拍广告之前的各项工作"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"处理拍广告之后的善后工作"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代理模式分为：</p><ul><li><p>静态代理模式</p><ul><li>普通代理模式</li><li>强制带离模式</li></ul></li><li><p>动态代理模式</p></li></ul><p>普通代理模式：要求客户端只能访问代理角色，而不能访问真实角色。</p><p>例子：游戏代练</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        GameProxy gameProxy = <span class="keyword">new</span> GameProxy(<span class="string">"Miss"</span>);</div><div class="line">        gameProxy.login();</div><div class="line">        gameProxy.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(IGamePlayer gamePlayer, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (gamePlayer == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不能创建对象"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"-登录成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"升级了！！！！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> GamePlayer mGamePlayer = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mGamePlayer = <span class="keyword">new</span> GamePlayer(<span class="keyword">this</span>, name);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        mGamePlayer.login();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        mGamePlayer.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="强制代理"><a href="#强制代理" class="headerlink" title="强制代理"></a>强制代理</h6><p>必须通过真实角色找到代理角色，否则无法访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        GamePlayer player = <span class="keyword">new</span> GamePlayer(<span class="string">"Miss"</span>);</div><div class="line">        player.login();</div><div class="line">        player.upgrade();</div><div class="line">        GameProxy proxy = <span class="keyword">new</span> GameProxy(player.getPlayer());</div><div class="line">        proxy.login();</div><div class="line">        proxy.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">IGamePlayer <span class="title">getPlayer</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IGamePlayer player;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.player == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isProxy()) &#123;</div><div class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">"-登录成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"请使用代理访问"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isProxy()) &#123;</div><div class="line">            System.out.println(<span class="string">"升级了！！！！"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"请使用代理访问"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.player = <span class="keyword">new</span> GameProxy(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.player;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> IGamePlayer gamePlayer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(IGamePlayer gamePlayer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer = gamePlayer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer.login();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gamePlayer.upgrade();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">请使用代理访问</div><div class="line">请使用代理访问</div><div class="line"><span class="built_in">Miss</span>-登录成功</div><div class="line">升级了！！！！</div></pre></td></tr></table></figure><h6 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h6><p>动态代理：实现阶段不用关系代理是哪个，而在运行阶段指定具体哪个代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        IGamePlayer mGamePlayer = <span class="keyword">new</span> GamePlayer(<span class="string">"Miss"</span>);</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> GameProxy(mGamePlayer);</div><div class="line">        <span class="comment">//生成一个代理者</span></div><div class="line">        <span class="comment">// ClassLoader: 指定当前目标对象使用类加载器</span></div><div class="line">        <span class="comment">// Class&lt;?&gt; [] interface: 目标对象实现接口的类型</span></div><div class="line">        <span class="comment">// InvocationHandler: 事件处理，执行目标对象的方法时，会触发事件处理器的方法。</span></div><div class="line">        IGamePlayer player = (IGamePlayer) Proxy.newProxyInstance(mGamePlayer.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;IGamePlayer.class&#125;, handler);</div><div class="line">        player.login(<span class="string">"Miss"</span>, <span class="string">"123456a"</span>);</div><div class="line">        player.upgrade();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String password)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String password)</span> </span>&#123;</div><div class="line">        System.out.println(name + <span class="string">"登录成功"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"升级了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line"><span class="comment">// 被代理的对象</span></div><div class="line">    <span class="keyword">private</span> Object obj;</div><div class="line"><span class="comment">// 将需要代理的实例通过构造方法传递给代理</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameProxy</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (method.getName().equalsIgnoreCase(<span class="string">"login"</span>)) &#123;</div><div class="line">        <span class="comment">// 在这个方法不收影响的情况下，在方法的前后添加新的功能</span></div><div class="line">        <span class="comment">// 从侧面切入从而达到扩展的效果的编程，就是面向切面编程（AOP Aspect Oriented Programming）</span></div><div class="line">            System.out.println(<span class="string">"代理登录了"</span>);</div><div class="line">            Object result = method.invoke(<span class="keyword">this</span>.obj, objects);</div><div class="line">            <span class="keyword">return</span>  result;</div><div class="line">        &#125;</div><div class="line">        Object result = method.invoke(<span class="keyword">this</span>.obj, objects);</div><div class="line">        <span class="keyword">return</span>  result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>动态代理模式的一般模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Subject subject = <span class="keyword">new</span> MySubject();</div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject);</div><div class="line">        ClassLoader loader = subject.getClass().getClassLoader();</div><div class="line">        Class &lt;?&gt;[] in = subject.getClass().getInterfaces();</div><div class="line">        Subject s = DynamicProxy.newProxyInstance(loader, in, handler);</div><div class="line">        s.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"吃饭睡觉打豆豆"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"前置方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfterAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"后置方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject mySubject;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Subject mySubject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mySubject = mySubject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Advice beforeAdvice = <span class="keyword">new</span> BeforeAdvice();</div><div class="line">        beforeAdvice.exec();</div><div class="line">        Object result = method.invoke(<span class="keyword">this</span>.mySubject, objects);</div><div class="line">        Advice afterAdvice = <span class="keyword">new</span> AfterAdvice();</div><div class="line">        afterAdvice.exec();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(ClassLoader classLoader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</span></span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        T t = (T) Proxy.newProxyInstance(classLoader, interfaces, handler);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="2-装饰模式（Decorator-Pattern）"><a href="#2-装饰模式（Decorator-Pattern）" class="headerlink" title="2.装饰模式（Decorator Pattern）"></a>2.装饰模式（Decorator Pattern）</h5><p>定义：动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更佳灵活</p><h6 id="模式中的角色"><a href="#模式中的角色" class="headerlink" title="模式中的角色"></a>模式中的角色</h6><ul><li>抽象构建（Component）：定义个个抽象接口，用于给对象动态的添加职责。</li><li>具体构建（ConcreteComponent）：定义一个具体的对象，也可以给这个对象添加一些职责。</li><li>装饰类（Decorator）：装饰抽象类。继承了Component，从外类来扩展Component类的功能。</li><li>具体装饰类：（ConcretorDecorator）：负责给构建对象添加职责。</li></ul><p>模式的一般模式：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    public static void main(<span class="type">String</span> [] args) &#123;</div><div class="line">        <span class="type">Component</span> component = <span class="keyword">new</span> <span class="type">ConcreteComponent</span>();</div><div class="line">        <span class="type">ConcreteDecorator</span> decorator = <span class="keyword">new</span> <span class="type">ConcreteDecorator</span>(component);</div><div class="line">        decorator.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">   public <span class="keyword">abstract</span> void doSomething();</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void doSomething() &#123;</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"具体实现的方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">Component</span> component;</div><div class="line"></div><div class="line">    public <span class="type">Decorator</span>(<span class="type">Component</span> component) &#123;</div><div class="line">        <span class="keyword">this</span>.component = component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void doSomething() &#123;</div><div class="line">        <span class="keyword">this</span>.component.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line"></div><div class="line">    public <span class="type">ConcreteDecorator</span>(<span class="type">Component</span> component) &#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void doSomething() &#123;</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"方法前要执行的动作"</span>);</div><div class="line">        <span class="keyword">super</span>.doSomething();</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"方法后要执行的动作"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="装饰模式的优点"><a href="#装饰模式的优点" class="headerlink" title="装饰模式的优点"></a>装饰模式的优点</h6><ul><li>装饰类和被装饰类可以独立的发展，不会相互耦合。</li><li>装饰模式是继承关系的一种替代方案，Decorator不管修饰多少层，返回的对象还是Component，实现的还是is-a的关系。</li><li>装饰模式可以动态的扩展一个实现类的功能。</li></ul><h6 id="装饰模式的缺点"><a href="#装饰模式的缺点" class="headerlink" title="装饰模式的缺点"></a>装饰模式的缺点</h6><ul><li>多层的装饰模式是比较复杂的。</li></ul><h6 id="装饰模式的使用场景"><a href="#装饰模式的使用场景" class="headerlink" title="装饰模式的使用场景"></a>装饰模式的使用场景</h6><ul><li>扩展一个类的功能，或给一个类增加附加的功能。</li><li>动态的给一个对象增加功能，这些功能可以动态的撤销。</li><li>为一些类进行改装或者增肌功能，首选装饰模式。</li></ul><h5 id="3-适配器模式"><a href="#3-适配器模式" class="headerlink" title="3. 适配器模式"></a>3. 适配器模式</h5><p>定义：将一个类的接口编程客户端所期待的另一个接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p><p>适配器模式的一般模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Target target = <span class="keyword">new</span> ConcreteTarget();</div><div class="line">        target.doSomething();</div><div class="line">        Target adapter = <span class="keyword">new</span> Adapter();</div><div class="line">        adapter.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteTarget</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是目标角色，现在要使用我的..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span> <span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是源角色，从这里转变。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.doSome();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>适配器模式在android中比较常见，比如ListView的适配器。<br>例子：有两种插座：两孔的和三孔的。在一个宾馆里 只有两孔的插座，所有我们要做一些操作，让我们可以用三孔的插座</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        TSocketInterface socket = <span class="keyword">new</span> ThreeSocket();</div><div class="line">        Hotel hotel = <span class="keyword">new</span> Hotel();</div><div class="line">        SocketAdapter adapter = <span class="keyword">new</span> SocketAdapter(socket);</div><div class="line">        hotel.setSocket(adapter);</div><div class="line">        hotel.charge();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SocketInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TwoRound</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSocket</span> <span class="keyword">implements</span> <span class="title">SocketInterface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TwoRound</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"使用两孔插座"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TSocketInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ThreeRound</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreeSocket</span> <span class="keyword">implements</span> <span class="title">TSocketInterface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThreeRound</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"使用三孔插座"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketAdapter</span> <span class="keyword">implements</span> <span class="title">SocketInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TSocketInterface socket;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketAdapter</span><span class="params">(TSocketInterface socket)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.socket = socket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TwoRound</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.socket.ThreeRound();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hotel</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SocketInterface socket;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSocket</span><span class="params">(SocketInterface socket)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.socket = socket;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span> <span class="params">()</span> </span>&#123;</div><div class="line">        socket.TwoRound();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="适配器模式的特点"><a href="#适配器模式的特点" class="headerlink" title="适配器模式的特点"></a>适配器模式的特点</h6><ul><li>适配器对象实现原有接口</li><li>适配器对象组合一个实现新接口的对象</li><li>对适配器原有接口方法的调用被委托给新接口的实例的特定方法。</li></ul><h5 id="4-外观模式"><a href="#4-外观模式" class="headerlink" title="4.外观模式"></a>4.外观模式</h5><p>定义： 要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。</p><p>例子：进门分为几个步骤：拿钥匙、开门、进房间。而关门的话，也需要差不多的步骤，这时就需要一个外观模式，通过一个合理的方式将这些动作包装起来。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">        Facade facade = <span class="keyword">new</span> Facade(<span class="keyword">new</span> Key(), <span class="keyword">new</span> Door(), <span class="keyword">new</span> House());</div><div class="line">        facade.<span class="keyword">in</span>();</div><div class="line">        facade.<span class="keyword">out</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Key</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takekey</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"拿钥匙"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">Door</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openDoor</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"开门"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDoor</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"关门"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">House</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goIn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"进入房间"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOut</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"出房间"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">Facade</span> &#123;</div><div class="line">    <span class="keyword">private</span> Key key;</div><div class="line">    <span class="keyword">private</span> Door door;</div><div class="line">    <span class="keyword">private</span> House house;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span>(<span class="params">Key key, Door door, House house</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.door = door;</div><div class="line">        <span class="keyword">this</span>.house = house;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        key.takekey();</div><div class="line">        door.openDoor();</div><div class="line">        house.goIn();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        key.takekey();</div><div class="line">        house.goOut();</div><div class="line">        door.closeDoor();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="外观模式的优点"><a href="#外观模式的优点" class="headerlink" title="外观模式的优点"></a>外观模式的优点</h6><ul><li>减少系统的相互依赖</li><li>提高灵活性</li><li>提高安全性</li></ul><h6 id="外观模式的缺点"><a href="#外观模式的缺点" class="headerlink" title="外观模式的缺点"></a>外观模式的缺点</h6><ul><li>不符合开闭原则</li></ul><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><ul><li>为一个复杂的模块后子系统提供一个供外界访问的接口</li><li>子系统相互独立，外界对子系统的访问只要黑箱操作就可以</li><li>预防低水平人员带来的风险扩散</li></ul><h5 id="5-组合模式（Composite-Pattern）"><a href="#5-组合模式（Composite-Pattern）" class="headerlink" title="5.组合模式（Composite Pattern）"></a>5.组合模式（Composite Pattern）</h5><p>定义：将对象组合成树形结构表示“部分-整体”的层次结构。Composite模式使得用户对单个对象和组合对象的使用具有一致性。</p><h6 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h6><ul><li>抽象构件（Component）: 定义参与组合对象的共有方法和属性，可以定义一些默认行为或属性。</li><li>树叶构件（Leaf）：组合中叶子对象，其下没有其他分支，是最小的单位。</li><li>树枝构件（Composite）：在组合中表示分直接点对象，有子节点，存储子部件。</li></ul><p>一般模式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         *           composite1</div><div class="line">         *           /      \</div><div class="line">         *        leaf1   composite2</div><div class="line">         *                  /   \</div><div class="line">         *               leaf2  leaf3</div><div class="line">         *</div><div class="line">         * */</div><div class="line">        Component leaf1=<span class="keyword">new</span> Leaf();</div><div class="line">        Component leaf2=<span class="keyword">new</span> Leaf();</div><div class="line">        Component leaf3=<span class="keyword">new</span> Leaf();</div><div class="line">        Composite composite1=<span class="keyword">new</span> Composite();</div><div class="line">        Composite composite2=<span class="keyword">new</span> Composite();</div><div class="line"></div><div class="line">        composite2.<span class="keyword">add</span>(leaf2);</div><div class="line">        composite2.<span class="keyword">add</span>(leaf3);</div><div class="line">        composite1.<span class="keyword">add</span>(leaf1);</div><div class="line">        composite1.<span class="keyword">add</span>(composite2);</div><div class="line"></div><div class="line">        composite1.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">interface</span> <span class="title">Component</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="title">implements</span> <span class="title">Component</span> &#123;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params"></span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Leaf doSomething"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">Composite</span> <span class="title">implements</span> <span class="title">Component</span> &#123;</div><div class="line">    List&lt;Component&gt; childs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> (<span class="params">Component child</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.childs.<span class="keyword">add</span>(child);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params">Component component</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.childs.<span class="keyword">remove</span>(component);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span>(<span class="params"><span class="keyword">int</span> i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span>  <span class="keyword">this</span>.childs.<span class="keyword">get</span>(i);</div><div class="line">    &#125;</div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Component child : childs) &#123;</div><div class="line">            child.doSomething();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h6><ul><li>透明式的组合模式：将管理子构件的方法定义在Component接口中，这样Leaf类就需要处理这些对其意义不大的方法，在接口层次上Leaf和Composite没有区别，这就是透明性。</li><li>安全式的组合模式：将管理子构件的方法定义在Composite中，这样编译时任何从Leaf中增加或删除对象的尝试都将会被发现。</li></ul><h6 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>忽略组合对象和单个对象的不同，用户将统一地使用组合结构中所有对象。</li><li>想表示对象的部分-整体层次结构。</li></ul><h5 id="6-桥接模式"><a href="#6-桥接模式" class="headerlink" title="6.桥接模式"></a>6.桥接模式</h5><p><code>定义</code>: 将抽象和实现解耦，使得两者之间可以独立的变化</p><p>桥接的用意是将抽象化和结构化解耦，使得二者可以独立变化，就像JDBC桥DriverManage一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不用改动太多代码，因为JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行。</p><p>一般模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Sourceable sourceable = <span class="keyword">new</span> ConcreteSource1();</div><div class="line">        Bridge bridge = <span class="keyword">new</span> MyBridge(sourceable);</div><div class="line">        bridge.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sourceable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSource1</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first source doSomething"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first source doAnything"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSource2</span> <span class="keyword">implements</span> <span class="title">Sourceable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second doSomething"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second doAnything"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Sourceable sourceable;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bridge</span><span class="params">(Sourceable sourceable)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sourceable = sourceable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Sourceable <span class="title">getSourceable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sourceable;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">()</span> </span>&#123;</div><div class="line">        sourceable.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBridge</span> <span class="keyword">extends</span> <span class="title">Bridge</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBridge</span><span class="params">(Sourceable sourceable)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(sourceable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.getSourceable().doAnything();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="桥接模式的优点："><a href="#桥接模式的优点：" class="headerlink" title="桥接模式的优点："></a>桥接模式的优点：</h6><ul><li>抽象和实现分离</li><li>优秀的扩充能力</li><li>实现细节对客户透明</li></ul><h6 id="桥接模式的使用场景"><a href="#桥接模式的使用场景" class="headerlink" title="桥接模式的使用场景"></a>桥接模式的使用场景</h6><ul><li>不希望或不适用使用继承的场景</li><li>接口或抽象不稳定的场景</li><li>重用性要求比较高的场景</li></ul><h5 id="7-享元模式"><a href="#7-享元模式" class="headerlink" title="7.享元模式"></a>7.享元模式</h5><p><code>定义</code>：使用<code>共享对象</code>可有效的支持大量的<code>细粒度</code>的对象。</p><p>细粒度对象由于对象数量多且性质相近，我们将其分为两个部分：内部状态和外部状态。</p><ul><li>内部状态：内部状态是对象可共享出来的信息，存储在享元对象内部并且不会随环境而改变。如 id，adress等。</li><li>外部状态：对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。</li></ul><p>一般模式：</p><ul><li>Flyweight: 抽象享元角色，定义出对象的外部状态和北部状态的接口或接口实现。</li><li>ConcreteFlyweight 具体的享元角色，实现抽象角色定义的的义务。</li><li>FlyweightFactory: 构造一个对象池，从池中提供对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        FlyweightFactory.getFlyweight(<span class="string">"Miss"</span>);</div><div class="line">        FlyweightFactory.getFlyweight(<span class="string">"Boss"</span>);</div><div class="line">        FlyweightFactory.getFlyweight(<span class="string">"Miss"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="comment">//内部状态</span></div><div class="line">   <span class="keyword">private</span> String intrinsic;</div><div class="line">    <span class="comment">// 外部状态</span></div><div class="line">    <span class="keyword">private</span> String extrinsic;</div><div class="line">    <span class="comment">// 构造方法提供外部字符串</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.extrinsic = extrinsic;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntrinsic</span><span class="params">(String intrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.intrinsic = intrinsic;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIntrinsic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> intrinsic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span> <span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(extrinsic);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first operate  "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ContreteFlyweight2</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContreteFlyweight2</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(extrinsic);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second operate"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 享元工厂</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Flyweight&gt; list = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span> <span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        Flyweight flyweight = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (list.containsKey(extrinsic)) &#123;</div><div class="line">            System.out.println(<span class="string">"从对象池中取对象。。"</span>);</div><div class="line">            flyweight = list.get(extrinsic);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(extrinsic);</div><div class="line">            list.put(extrinsic, flyweight);</div><div class="line">            System.out.println(<span class="string">"创建新对象。。"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flyweight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="享元模式优点："><a href="#享元模式优点：" class="headerlink" title="享元模式优点："></a>享元模式优点：</h6><p>减少应用创建的对象，降低使用内存，增强程序性能。</p><h6 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h6><p>系统中存在很多相似对象，细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关。</p><h4 id="3-行为模式"><a href="#3-行为模式" class="headerlink" title="3.行为模式"></a>3.行为模式</h4><p>行为模式：用于在不同的实体之间进行通信，为实体之间的通信提供更容易，更灵活的通信方法。</p><p>其中属于行为模式的是：观察者模式、策略模式、访问者模式、中介者模式、状态模式、备忘录模式、责任链模式、模版方法模式、迭代子模式、命令模式、解释器模式。</p><h5 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1.观察者模式"></a>1.观察者模式</h5><p><code>定义</code>：定义对象间一种一对多的依赖关系，使得每当一个对象发生变化，其他依赖它的对象都会得到通知并自动更新。</p><p>观察者模式又叫发布-订阅模式，在Android中用的还是比较多的，推荐理解掌握。</p><h6 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建被观察者</span></div><div class="line">        Subject subject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line">        <span class="comment">// 添加观察者</span></div><div class="line">        subject.add(<span class="keyword">new</span> ConcreteObserver(<span class="string">"徐晓路"</span>));</div><div class="line">        subject.add(<span class="keyword">new</span> ConcreteObserver(<span class="string">"小埋"</span>));</div><div class="line">        <span class="comment">// 更新信息</span></div><div class="line">        subject.notify(<span class="string">"博客系统更新了"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 观察者接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体观察者</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>.name +<span class="string">"-"</span>+ message);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 抽象被观察者</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 增加观察者</div><div class="line">    * */</div><div class="line">     <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer ob)</span></span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 删除观察者</div><div class="line">    * */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer ob)</span></span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 更新信息</div><div class="line">    * */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer ob)</span> </span>&#123;</div><div class="line">        list.add(ob);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer ob)</span> </span>&#123;</div><div class="line">        list.remove(ob);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : list) &#123;</div><div class="line">            observer.update(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Observer：抽象观察者，提供一个接口，在得到通知时更新自己。</li><li>ConcreteObserver: 具体观察者，实现抽象观察者，在得到通知时更新自己的状态</li><li>Subject: 抽象被观察者，将所有的观察者存储在一个集合里，并提供增加、删除观察者的接口</li><li>ConcreteSubject: 具体被观察者，实现抽象被观察者接口，得以在更新时通知所有观察者。</li></ul><h6 id="观察者模式的优点"><a href="#观察者模式的优点" class="headerlink" title="观察者模式的优点"></a>观察者模式的优点</h6><ul><li>观察者和被观察者之间是抽象耦合，变换互不影响</li><li>一套触发机制</li></ul><h6 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a>观察者模式的缺点</h6><ul><li>观察者模式是，一个被观察者，多个观察者，一旦 一个观察者卡顿，就会硬系哦昂其他观察者，</li></ul><h6 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>关联行为场景，关联行为是可查分的，而不是“组合”关系</li><li>事件多出发场景</li><li>跨系统的消息交换，如 消息队列</li></ul><p>观察者模式在Android源码中使用还是蛮多的，比如<code>OnClickListener</code>、<code>ContentObserver</code>、<code>android.database.Observable</code>,第三方组件像<code>RxJava</code>、 <code>RxAndroid</code>、<code>EventBus</code>都用到了观察者模式，这里就不过多分析了。</p><h5 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h5><p><code>定义</code>：定义一组算法，把每一个算法封装起来，并且使它们之间可以相互切换。</p><h6 id="一般模式-1"><a href="#一般模式-1" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategy());</div><div class="line">        context.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy2</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Strategy strategy;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Strategy: 抽象策略角色，提供一个接口，定义所有策略要实现的方法和属性</li><li>ConcreteStrategy：具体策略角色，实现Strategy，是想具体的方法</li><li>Context 封装角色，屏蔽高层模块策略，算法的直接访问。</li></ul><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>可以动态的改变对象的行为，扩展性良好。</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>策略类数量多</li><li>所有策略必须可知</li></ul><h6 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>算法需要自由切换的场景</li><li>需要屏蔽算法规则的场景</li><li>多个类只在行为或算法上稍有不懂的场景</li></ul><h5 id="3-访问者模式"><a href="#3-访问者模式" class="headerlink" title="3.访问者模式"></a>3.访问者模式</h5><p><code>定义</code>：封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p><h6 id="一般模式-2"><a href="#一般模式-2" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        List&lt;Element&gt; list = ObjectStruture.createElement();</div><div class="line">        <span class="keyword">for</span> (Element element: list) &#123;</div><div class="line">            element.accept(<span class="keyword">new</span> ConcreteVisitor());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 抽象元素类</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 抽象访问者</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement1 element1)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement2 element2)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElement1</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first element"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElement2</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second element"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement1 element1)</span> </span>&#123;</div><div class="line">        element1.doSomething();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement2 element2)</span> </span>&#123;</div><div class="line">        element2.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStruture</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Element&gt; <span class="title">createElement</span> <span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Element&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = random.nextInt(<span class="number">50</span>);</div><div class="line">            <span class="keyword">if</span> (j &gt; <span class="number">25</span>) &#123;</div><div class="line">                list.add(<span class="keyword">new</span> ConcreteElement1());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                list.add(<span class="keyword">new</span> ConcreteElement2());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Element：抽象元素类，一般提供两类方法，一种是自身的业务逻辑，另外就是允许接收哪类访问者来访问</li><li>Visitor：抽象访问者，抽象类或者接口，声明访问哪些元素</li><li>ConcreteElement: 访问者，实现抽象访问者所声明的方法</li><li>ConcreteVistor:元素类，是想抽象元素的所声明的accpect方法。</li></ul><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ul><li>符合单一职责原则</li><li>扩展性良好，灵活度高</li></ul><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ul><li>具体元素变更比较困难</li><li>违背了依赖倒置原则</li></ul><h6 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>一个对象中存在着一些与本对象不相干的操作，为了避免这些操作污染这个对象。可以使用访问者模式</li><li>一组对象中，寻在这相似的操作，为了避免大量重复代码，可以使用访问者模式</li></ul><h5 id="4-中介者模式"><a href="#4-中介者模式" class="headerlink" title="4.中介者模式"></a>4.中介者模式</h5><p><strong>定义</strong>：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互交互，从而使期耦合松散，并且可以独立地改变它们之间的交互。</p><p>中介者模式其实就是将网状的用户关系模型改编成星形的用户关系模型。</p><h6 id="一般模式-3"><a href="#一般模式-3" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        ConcreteColleagueA coA = <span class="keyword">new</span> ConcreteColleagueA();</div><div class="line">        ConcreteColleagueB coB = <span class="keyword">new</span> ConcreteColleagueB();</div><div class="line">                Mediator mediator = <span class="keyword">new</span> ConcreteMediator(coA, coB);</div><div class="line">        coA.setNumber(<span class="number">1000</span>, mediator);</div><div class="line">        System.out.println(<span class="string">"----coA--"</span> + coA.getNumber());</div><div class="line">        System.out.println(<span class="string">"----coB--"</span>+ coB.getNumber());</div><div class="line">        coB.setNumber(<span class="number">1000</span>, mediator);</div><div class="line">        System.out.println(<span class="string">"----coA--"</span> + coA.getNumber());</div><div class="line">        System.out.println(<span class="string">"----coB--"</span>+ coB.getNumber());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">    &#125;</div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number, Mediator mediator)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueA</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number, Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">        mediator.AaffectB();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueB</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number, Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.number = number;</div><div class="line">        mediator.BaffectA();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> ConcreteColleagueA coA;</div><div class="line">    <span class="keyword">protected</span> ConcreteColleagueB coB;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mediator</span><span class="params">(ConcreteColleagueA coA, ConcreteColleagueB coB)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.coA = coA;</div><div class="line">        <span class="keyword">this</span>.coB = coB;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">AaffectB</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BaffectA</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">(ConcreteColleagueA coA, ConcreteColleagueB coB)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(coA, coB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AaffectB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> number = coA.getNumber();</div><div class="line">        coB.setNumber(number * <span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BaffectA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> number = coB.getNumber();</div><div class="line">        coA.setNumber(number * <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Colleague: 同事类，提供一个方法，使得其属性的变化和中介者相关联</li><li>Mediator: 抽象中介者，定义统一的接口，用于各同事直接通信</li><li>ConcreteMediator: 通过协调各同事实现协同行为，因此必须依赖各个同事角色。</li><li>Colleague: 同事类，提供一个方法，使得其属性的变化和中介者相关联</li><li>Mediator: 抽象中介者，定义统一的接口，用于各同事直接通信</li><li>ConcreteMediator: 通过协调各同事实现协同行为，因此必须依赖各个同事角色。</li></ul><h5 id="5-状态模式"><a href="#5-状态模式" class="headerlink" title="5.状态模式"></a>5.状态模式</h5><p><strong>定义</strong>：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。</p><h6 id="一般模式-4"><a href="#一般模式-4" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Context context = <span class="keyword">new</span> Context();</div><div class="line">        context.setState(<span class="keyword">new</span> ConcreteState1());</div><div class="line">        context.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> State currState;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcreteState1 state1 = <span class="keyword">new</span> ConcreteState1();</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcreteState2 state2 = <span class="keyword">new</span> ConcreteState2();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.currState = state;</div><div class="line">        <span class="keyword">this</span>.currState.setContext(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.currState.method1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.currState.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteState1</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is first method"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.context.setState(Context.state2);</div><div class="line">        <span class="keyword">super</span>.context.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteState2</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.context.setState(Context.state1);</div><div class="line">        <span class="keyword">super</span>.context.method1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is second method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>State: 抽象状态类，负责对象状态定义，并且封装环境角色以实现状态切换。</li><li>ConcreteState：具体状态角色，完成本状态下要做的事情以及如何过渡到其他状态</li><li>Context：环境角色，负责具体的状态切换</li></ul><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><ul><li>结构清晰，封装性好</li></ul><h6 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h6><ul><li>环境类中角色自类太多，不好管理</li></ul><h6 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>行为随状态改变而改变的场景</li><li>条件、分支判断语句的替代者</li></ul><h5 id="6-备忘录模式"><a href="#6-备忘录模式" class="headerlink" title="6.备忘录模式"></a>6.备忘录模式</h5><p><strong>定义</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><h6 id="一般模式-5"><a href="#一般模式-5" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public class MyClass &#123;</div><div class="line">    public static void main(String [] args) &#123;</div><div class="line">        Originator originator = new Originator();</div><div class="line">        Caretaker caretaker = new Caretaker();</div><div class="line">        originator.<span class="built_in">set</span>State(<span class="string">" 你好吗"</span>);</div><div class="line">        caretaker.<span class="built_in">set</span>Memento(originator.createMemento());</div><div class="line">        // 改变状态</div><div class="line">        originator.<span class="built_in">set</span>State(<span class="string">"你还好吗"</span>);</div><div class="line">        // 回复原来状态</div><div class="line">        originator.restoreMementor(caretaker.getMemento());</div><div class="line">        System.<span class="keyword">out</span>.println(originator.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">* 备忘录角色</div><div class="line">* 备份、存储原有数据</div><div class="line">* */</div><div class="line">class Memento &#123;</div><div class="line">    private String <span class="keyword">state</span> = <span class="string">""</span>;</div><div class="line"></div><div class="line">    public Memento(String <span class="keyword">state</span>) &#123;</div><div class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>State(String <span class="keyword">state</span>) &#123;</div><div class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getState() &#123;</div><div class="line">        return <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">*  备忘录发起类</div><div class="line">*  备忘录中存储的就是该类的内容</div><div class="line">* */</div><div class="line">class Originator &#123;</div><div class="line">    private String <span class="keyword">state</span> = <span class="string">""</span>;</div><div class="line"></div><div class="line">    public String getState() &#123;</div><div class="line">        return <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>State(String <span class="keyword">state</span>) &#123;</div><div class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line">    public Memento createMemento() &#123;</div><div class="line">        return new Memento(this.<span class="keyword">state</span>);</div><div class="line">    &#125;</div><div class="line">    public void  restoreMementor(Memento memento) &#123;</div><div class="line">        this.<span class="built_in">set</span>State(memento.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">*  备忘录管理类</div><div class="line">*  对备忘录进行管理，存储</div><div class="line">* */</div><div class="line">class Caretaker &#123;</div><div class="line">    private Memento memento;</div><div class="line"></div><div class="line">    public Memento getMemento() &#123;</div><div class="line">        return memento;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Memento(Memento memento) &#123;</div><div class="line">        this.memento = memento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="多状态多备份备忘录"><a href="#多状态多备份备忘录" class="headerlink" title="多状态多备份备忘录"></a>多状态多备份备忘录</h6><p>通常情况下，Originator类一般是一个JavaBean，而需要保存的状态不止一个，需要备份数量也不止一个，这就是所谓的多状态多备份备忘录，就像下面代码：</p> <figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> class MyClass &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> [] args) &#123;</div><div class="line">        Originator originator = <span class="keyword">new</span> Originator();</div><div class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">        originator.setState1(<span class="string">"我是谁"</span>);</div><div class="line">        originator.setState2(<span class="string">"我在哪"</span>);</div><div class="line">        originator.setState3(<span class="string">"我在干嘛"</span>);</div><div class="line">        caretaker.setMemento(<span class="string">"01"</span>, originator.createMemento());</div><div class="line">        originator.setState1(<span class="string">"hahhaha"</span>);</div><div class="line">        originator.setState2(<span class="string">" 我在家"</span>);</div><div class="line">        originator.setState3(<span class="string">"ouh;"</span>);</div><div class="line">        originator.restoreMementor(caretaker.getMemento(<span class="string">"01"</span>));</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"------恢复之后的状态--"</span> + originator);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">* 备忘录角色</div><div class="line">* 备份、存储原有数据</div><div class="line">* */</div><div class="line">class Memento &#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; stateMap;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Memento(Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; stateMap) &#123;</div><div class="line">        <span class="keyword">this</span>.stateMap = stateMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; getStateMap() &#123;</div><div class="line">        <span class="keyword">return</span> stateMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setStateMap(Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; stateMap) &#123;</div><div class="line">        <span class="keyword">this</span>.stateMap = stateMap;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class BeanUtils &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; backupProp(<span class="keyword">Object</span> bean) &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; result = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass());</div><div class="line">            <span class="comment">//返回PropertyDescriptor类型的javaBean描述</span></div><div class="line">            PropertyDescriptor[] descriptors = (PropertyDescriptor[]) beanInfo.getPropertyDescriptors();</div><div class="line">            <span class="keyword">for</span> (PropertyDescriptor des : descriptors) &#123;</div><div class="line">                <span class="keyword">String</span> fieldName = des.getName();</div><div class="line">                <span class="comment">// 读取属性的方法</span></div><div class="line">                Method method = des.getReadMethod();</div><div class="line">                <span class="comment">// 读取属性值</span></div><div class="line">                <span class="keyword">Object</span> fieldValue = method.invoke(bean, <span class="keyword">new</span> <span class="keyword">Object</span>[]&#123;&#125;);</div><div class="line">                <span class="keyword">if</span> (!fieldName.equalsIgnoreCase(<span class="string">"class"</span>)) &#123;</div><div class="line">                    result.put(fieldName, fieldValue);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> restoreProp(<span class="keyword">Object</span> bean, Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; propMap) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass());</div><div class="line">            <span class="comment">//获取PropertyDescriptor的对象数组</span></div><div class="line">            PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();</div><div class="line">            <span class="comment">//增强for循环，遍历所有的属性，设置到bean中</span></div><div class="line">            <span class="keyword">for</span>(PropertyDescriptor des: descriptors)&#123;</div><div class="line">                <span class="comment">//获取key值对象</span></div><div class="line">                <span class="keyword">String</span> fieldName = des.getName();</div><div class="line">                <span class="keyword">if</span>(propMap.containsKey(fieldName))&#123;</div><div class="line">                    Method setter = des.getWriteMethod();</div><div class="line">                    setter.invoke(bean, <span class="keyword">new</span> <span class="keyword">Object</span>[]&#123;propMap.<span class="built_in">get</span>(fieldName)&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*  备忘录发起类</div><div class="line">*  备忘录中存储的就是该类的内容</div><div class="line">* */</div><div class="line">class Originator &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> state1 = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> state2 = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> state3 = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getState1() &#123;</div><div class="line">        <span class="keyword">return</span> state1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getState2() &#123;</div><div class="line">        <span class="keyword">return</span> state2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getState3() &#123;</div><div class="line">        <span class="keyword">return</span> state3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setState1(<span class="keyword">String</span> state1) &#123;</div><div class="line">        <span class="keyword">this</span>.state1 = state1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setState2(<span class="keyword">String</span> state2) &#123;</div><div class="line">        <span class="keyword">this</span>.state2 = state2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setState3(<span class="keyword">String</span> state3) &#123;</div><div class="line">        <span class="keyword">this</span>.state3 = state3;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Memento createMemento() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(BeanUtils.backupProp(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  restoreMementor(Memento memento) &#123;</div><div class="line">        BeanUtils.restoreProp(<span class="keyword">this</span>, memento.getStateMap());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Originator&#123;"</span> +</div><div class="line">                <span class="string">"state1='"</span> + state1 + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", state2='"</span> + state2 + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", state3='"</span> + state3 + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*  备忘录管理类</div><div class="line">*  对备忘录进行管理，存储</div><div class="line">* */</div><div class="line">class Caretaker &#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, Memento&gt;  <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, Memento&gt;();</div><div class="line">    <span class="keyword">public</span> Memento getMemento(<span class="keyword">String</span> index)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setMemento(<span class="keyword">String</span> index, Memento memento)&#123;</div><div class="line">        <span class="keyword">this</span>.<span class="built_in">map</span>.put(index, memento);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h6><ul><li>可以回滚操作</li><li>发起人不用分别对每个备份状态进行管理</li></ul><h6 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h6><ul><li>对资源的消耗比较大</li></ul><h6 id="适用场景-6"><a href="#适用场景-6" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>在需要回滚操作的情况下</li></ul><h5 id="7-责任链模式"><a href="#7-责任链模式" class="headerlink" title="7.责任链模式"></a>7.责任链模式</h5><p><strong>定义</strong>：使多个对象都有机会处理请求，从而避免了发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理该请求为止。</p><p>举个例子：比如我们去部门去办理某项手续，你去的地方不能办理，他会转交给下个部门，如果下个部门也不能办理的话，还会转交给其他部门，直到给能办理的部门。</p><h6 id="一般模式-6"><a href="#一般模式-6" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler();</div><div class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler();</div><div class="line">        handler1.setSuccessor(handler2);</div><div class="line">        handler1.handleRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Handler successor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getSuccessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> successor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.successor = successor;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getSuccessor() != <span class="keyword">null</span>) &#123;</div><div class="line">            getSuccessor().handleRequest();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"我来处理"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象处理者角色(Handler)：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。</li><li>具体处理者角色(ConcreteHandler)：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。</li></ul><h6 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h6><ul><li>灵活度高，两者解耦</li></ul><h6 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h6><ul><li>调试不方便</li></ul><h5 id="8-模版方法模式"><a href="#8-模版方法模式" class="headerlink" title="8.模版方法模式"></a>8.模版方法模式</h5><p><strong>定义</strong>：定义一个操作中的算法框架，而将一些步骤延迟到子类中，子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>举个例子：比如我们去银行取办理业务，一般的流程是取号，然后办理业务，然后给办理员做出评价。取号和评价都是基本要做的，但是其中的办理业务就会出现各种不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        AbstractBank b1 = <span class="keyword">new</span> ConcreteDeposit();</div><div class="line">        b1.process();</div><div class="line">        AbstractBank b2 = <span class="keyword">new</span> ConcreteTrancfer();</div><div class="line">        b2.process();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBank</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"取号"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluateHook</span> <span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"评价操作员"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span> <span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.takeNumber();</div><div class="line">        <span class="keyword">this</span>.transact();</div><div class="line">        <span class="keyword">this</span>.evaluateHook();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDeposit</span> <span class="keyword">extends</span> <span class="title">AbstractBank</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"存款"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteTrancfer</span> <span class="keyword">extends</span> <span class="title">AbstractBank</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"转账"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h6><ul><li>形式定义算法，具体细节由子类实现 </li><li>代码复用</li></ul><h6 id="适用场景-7"><a href="#适用场景-7" class="headerlink" title="适用场景"></a>适用场景</h6><ul><li>多个子类有共有的方法，并且逻辑基本相同</li><li>重复复杂的算法，可以把核心算法设计为模版方法，具体细节由子类去实现</li><li>控制子类扩展</li></ul><h5 id="9-迭代器模式"><a href="#9-迭代器模式" class="headerlink" title="9.迭代器模式"></a>9.迭代器模式</h5><p><strong>定义</strong>：提供一种方法访问一个容器对象中各个元素，而不是暴露该对象的内容细节。</p><h6 id="一般模式-7"><a href="#一般模式-7" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</div><div class="line">        aggregate.<span class="keyword">add</span>(<span class="string">"王二"</span>);</div><div class="line">        aggregate.<span class="keyword">add</span>(<span class="string">"李五"</span>);</div><div class="line">        aggregate.<span class="keyword">add</span>(<span class="string">"赵四"</span>);</div><div class="line">        Iterator iterator = aggregate.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            String <span class="keyword">object</span> = (String) iterator.next();</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="keyword">object</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">interface</span> <span class="title">Iterator</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasNext</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="title">implements</span> <span class="title">Iterator</span> &#123;</div><div class="line">    <span class="keyword">private</span> List list = <span class="keyword">new</span> ArrayList();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span>(<span class="params">List list</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> Object <span class="title">next</span>(<span class="params"></span>) &#123;</div><div class="line">        Object <span class="keyword">object</span> = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">if</span> (hasNext()) &#123;</div><div class="line">            <span class="keyword">object</span> = list.<span class="keyword">get</span>(cursor ++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">object</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> boolean <span class="title">hasNext</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">if</span> (list.size() == cursor) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">interface</span> <span class="title">Aggregate</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Object <span class="keyword">object</span></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params">Object <span class="keyword">object</span></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="title">implements</span> <span class="title">Aggregate</span> &#123;</div><div class="line">    <span class="keyword">private</span> List list = <span class="keyword">new</span> ArrayList();</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Object <span class="keyword">object</span></span>) &#123;</div><div class="line">        list.<span class="keyword">add</span>(<span class="keyword">object</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params">Object <span class="keyword">object</span></span>) &#123;</div><div class="line">        list.<span class="keyword">remove</span>(<span class="keyword">object</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> Iterator <span class="title">iterator</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(list);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Iterator: 抽象迭代器，定义遍历元素所需要的方法，</li><li>ConcreteIterator:迭代器的实现类，实现定义的方法，完成集合的迭代。</li><li>Aggregate：抽象容器，提供iterator（）方法。</li><li>ConcreteAggregate: 抽象容器实现类。</li></ul><h6 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h6><ul><li>简化遍历方式</li><li>封装性良好</li></ul><h6 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h6><ul><li>对于简单的遍历，可能使用起来会比较繁琐。</li></ul><h5 id="10-命令模式"><a href="#10-命令模式" class="headerlink" title="10.命令模式"></a>10.命令模式</h5><p><strong>定义</strong>： 将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或记录请求日志，可以提供命令的撤销和恢复功能。</p><h6 id="一般模式-8"><a href="#一般模式-8" class="headerlink" title="一般模式"></a>一般模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> ConcreteReceiver()));</div><div class="line">        invoker.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*   接收者，真正执行命令的对象</div><div class="line">* */</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteReceiver</span> <span class="keyword">extends</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is a method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*  定义命令的接口。声明执行的方法</div><div class="line">* */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Receiver receiver ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*  要求命令执行请求，持有命令对象</div><div class="line">* */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Command command;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的职责分隔开。</p><h5 id="11-解释器模式"><a href="#11-解释器模式" class="headerlink" title="11.解释器模式"></a>11.解释器模式</h5><p><strong>定义</strong>：给定一个语言，定义它的文法的一种表示，并表示一个解释器，这个解释器使用该表示来解释语言中的句子。</p><p>解释器模式，在Android中用到的不多，但是也可以简单了解一下。<br>举一个加减乘除的例子</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    public static void main(<span class="type">String</span> [] args) &#123;</div><div class="line">        <span class="type">Expression</span> ex ;</div><div class="line"></div><div class="line">        <span class="type">Context</span> con ;</div><div class="line">        con = <span class="keyword">new</span> <span class="type">Context</span>();</div><div class="line"></div><div class="line">        <span class="comment">//设置变量、常量</span></div><div class="line"></div><div class="line">        <span class="type">Variable</span> a = <span class="keyword">new</span> <span class="type">Variable</span>();</div><div class="line"></div><div class="line">        <span class="type">Variable</span> b = <span class="keyword">new</span> <span class="type">Variable</span>();</div><div class="line"></div><div class="line">        <span class="type">Constant</span> c = <span class="keyword">new</span> <span class="type">Constant</span>(<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">//为变量赋值</span></div><div class="line"></div><div class="line">        con.addValue(a , <span class="number">8</span>);</div><div class="line"></div><div class="line">        con.addValue(b , <span class="number">9</span>);</div><div class="line"></div><div class="line"><span class="comment">//运算，对句子的结构由我们自己来分析，构造</span></div><div class="line"></div><div class="line">        ex = <span class="keyword">new</span> <span class="type">Division</span>(<span class="keyword">new</span> <span class="type">Multiply</span>(a , b), <span class="keyword">new</span> <span class="type">Add</span>(<span class="keyword">new</span> <span class="type">Subtract</span>(a , b) , c));</div><div class="line"></div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"运算结果为："</span>+ex.interpret(con));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Map</span> valueMap = <span class="keyword">new</span> <span class="type">HashMap</span>();</div><div class="line"></div><div class="line">    public void addValue(<span class="type">Variable</span> x , int y)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="type">Integer</span> yi = <span class="keyword">new</span> <span class="type">Integer</span>(y);</div><div class="line"></div><div class="line">        valueMap.put(x , yi);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int <span class="type">LookupValue</span>(<span class="type">Variable</span> x)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        int i = ((<span class="type">Integer</span>)valueMap.get(x)).intValue();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> i ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    public <span class="keyword">abstract</span> int interpret(<span class="type">Context</span> con);</div><div class="line">&#125;</div><div class="line"><span class="comment">//终结符表达式角色</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> int i ;</div><div class="line"></div><div class="line">    public <span class="type">Constant</span>(int i)</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.i = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> i ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variable</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//this为调用interpret方法的Variable对象</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> con.<span class="type">LookupValue</span>(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//非终结符表达式角色</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Expression</span> left ,right ;</div><div class="line"></div><div class="line">    public <span class="type">Add</span>(<span class="type">Expression</span> left , <span class="type">Expression</span> right)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.left = left ;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.right= right ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> left.interpret(con) + right.interpret(con);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subtract</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Expression</span> left , right ;</div><div class="line"></div><div class="line">    public <span class="type">Subtract</span>(<span class="type">Expression</span> left , <span class="type">Expression</span> right)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.left = left ;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.right= right ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> left.interpret(con) - right.interpret(con);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Expression</span> left , right ;</div><div class="line"></div><div class="line">    public <span class="type">Multiply</span>(<span class="type">Expression</span> left , <span class="type">Expression</span> right)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.left = left ;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.right= right ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> left.interpret(con) * right.interpret(con);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Division</span> <span class="keyword">extends</span> <span class="title">Expression</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="type">Expression</span> left , right ;</div><div class="line"></div><div class="line">    public <span class="type">Division</span>(<span class="type">Expression</span> left , <span class="type">Expression</span> right)</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.left = left ;</div><div class="line">        <span class="keyword">this</span>.right= right ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int interpret(<span class="type">Context</span> con)</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">return</span> left.interpret(con) / right.interpret(con);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(<span class="type">ArithmeticException</span> ae)</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            <span class="type">System</span>.out.println(<span class="string">"被除数为0！"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">-11111</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>抽象表达式(Expression)角色：声明一个所有的具体表达式角色都需要实现的抽象接口。这个接口主要是一个interpret()方法，称做解释操作。</p></li><li><p>终结符表达式(Terminal Expression)角色：实现了抽象表达式角色所要求的接口，主要是一个interpret()方法；文法中的每一个终结符都有一个具体终结表达式与之相对应。比如有一个简单的公式X=Y+Z，在里面R1和R2就是终结符，对应的解析Y和Z的解释器就是终结符表达式。</p></li><li><p>非终结符表达式(Nonterminal Expression)角色：文法中的每一条规则都需要一个具体的非终结符表达式，非终结符表达式一般是文法中的运算符或者其他关键字，比如公式X=Y-Z中，“-“就是非终结符，解析“+”的解释器就是一个非终结符表达式。</p></li><li><p>环境(Context)角色：这个角色的任务一般是用来存放文法中各个终结符所对应的具体值，比如X=Y+Z，我们给Y赋值2，给Y赋值3。这些信息需要存放到环境角色中，很多情况下我们使用Map来充当环境角色就足够了</p><h4 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h4><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。在Android的源码中也会经常会出现设计模式的影子，在这里我把所有的设计模式都简单的一一介绍了，并没有深入的去探究，有需要或者有兴趣的可以自己去深入研究一下，者对我们来说也是有益无害的。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.csdn.net/itachi85/article/details/50773358" target="_blank" rel="external">设计模式（五）观察者模式</a></p></li></ul><p>《Android源码设计模式》</p><p>《大话设计模式》</p><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a href="https://www.zhihu.com/question/23757906" target="_blank" rel="external">如何正确地使用设计模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img0.imgtn.bdimg.com/it/u=2377589951,1785081828&amp;amp;fm=214&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在上一篇&lt;a href=&quot;https://lennyup.github.io/2017/09/22/android-java/&quot;&gt;android需要的Java基础（复习篇）&lt;/a&gt;中，我把Java的三大特性以及六大原则进行了一一复习总结，我打算这几天把设计模式进行下复习梳理，&lt;code&gt;设计模式&lt;/code&gt;这个老生常谈的东西，在以往的面试题以及面试中会经常问到，关于设计模式，网上有很多文章对其进行阐述。在这里，我只是通过自己的理解，把我所知道的写出来,文章很长，建议先收藏起来，慢慢看（ps：&lt;code&gt;_(:з」∠)_&lt;/code&gt;轻喷）。&lt;br&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.imemv.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://blog.imemv.com/tags/Java/"/>
    
      <category term="基础" scheme="http://blog.imemv.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="http://blog.imemv.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>android需要的Java基础（复习篇）</title>
    <link href="http://blog.imemv.com/2017/09/22/android-java/"/>
    <id>http://blog.imemv.com/2017/09/22/android-java/</id>
    <published>2017-09-22T03:21:17.000Z</published>
    <updated>2017-10-11T09:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这段时间，项目基本完成，进入测试上线阶段，终于可以闲下来查漏补缺了，这里我将复习下android所需要的java基础，也可以帮大家回忆一下，今年的Google IO 大会上，Google宣布Kotlin成为Android的官方语言，有兴趣的可以去学习下，Java作为android的第一个语言，还是需要把打这部分知识打牢固的。(这部分内容只是当作自己的复习)<br><a id="more"></a></p><h3 id="1、三大特性"><a href="#1、三大特性" class="headerlink" title="1、三大特性"></a>1、三大特性</h3><p>Java做为面向对象的语言，他的三大特性：<code>继承</code>、<code>封装</code>、<code>多态</code>。</p><h3 id="2、6大原则"><a href="#2、6大原则" class="headerlink" title="2、6大原则"></a>2、6大原则</h3><h5 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h5><p>定义： 不要存在多于一个导致类变更的原因。也就是说，一个类只负责一项职责</p><p>案例：工厂A负责生产面包和牛奶，当生产面包的需求发生变化时，需要改变工厂生产模式，这事就有可能影响牛奶的生产。</p><p>解决方案：遵循单一职责原则，分别建立两个子公司，一个负责生产面包，一个负责生产牛奶，这样如果面包需求变了就不会影响牛奶的生产了。</p><p>例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Factory</span> (<span class="params"></span>) </span>&#123;</div><div class="line">super();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(“生产饼干”)；</div><div class="line">System.<span class="keyword">out</span>.println(“生产葡萄干”);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (<span class="params">String [] args</span>) </span>&#123;</div><div class="line"><span class="keyword">new</span> Factory.product();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遵循单一职责原则，做如下修改：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryA</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(“生产饼干”);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryB</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(“生产葡萄干”);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> FactoryA mA;</div><div class="line"><span class="keyword">private</span> FactoryB mB;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Factory</span> <span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>();</div><div class="line">mA = <span class="keyword">new</span> FactoryA();</div><div class="line">mB = <span class="keyword">new</span> FactoryB();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</div><div class="line">mA.product();</div><div class="line">mB.product();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我理解的单一职责原则就是在开发过程中尽量将一些类的职责明确、唯一。</p><p>遵循单一职责的优点：</p><ul><li>降低复杂度</li><li>提高可读性</li><li>降低对其他功能的影响</li></ul><p>可是可能由于职责的颗粒化，我们往往会违背这个原则，这个原因为职责扩散（就是因为某些原因，我们要吧职责之一再次细分）<br>关于这部分请看 <a href="http://blog.csdn.net/zhengzhb/article/details/7278174" target="_blank" rel="external">单一职责原则（1）</a></p><h5 id="里氏替换原则-（Liskov-Substitutiion-Principle）"><a href="#里氏替换原则-（Liskov-Substitutiion-Principle）" class="headerlink" title="里氏替换原则 （Liskov Substitutiion Principle）"></a>里氏替换原则 （Liskov Substitutiion Principle）</h5><p>定义：所有引用基类的地方必须能够透明地使用其子类的对象</p><p>通俗的说，就是用父类的地方可以用子类去代替，但是用子类的地方用父类不一定能代替。</p><p>里氏替换原则包含4层含义：</p><ol><li>子类必须完全实现父类的方法</li><li>子类可以有自己的方法</li><li>当子类的方法重载父类的方法时，形参要比父类的范围更大</li><li>当子类的方法实现父类的抽象方法时，方法的返回值要比父类更严格</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">Man m = <span class="keyword">new</span> Man();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 人可以喂猫吃东西，可以有不同种类的猫</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Cat mCat;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat mCat)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.mCat = mCat;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">()</span> </span>&#123;</div><div class="line">mCat.eat();</div><div class="line">System.out.println(<span class="string">"正在进食..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Garfield</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"加菲猫进食..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folds</span> <span class="keyword">extends</span> <span class="title">Cat</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"折耳猫进食..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>优点： 可以对后期版本升级，增添子类时都可以很好的维护</p><h5 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h5><p>定义： 高层模块不应该依赖底层模块，应该依赖其抽象，抽象不应该依赖其细节，细节应该依赖其抽象。</p><p>底层模块：负责基本的操作</p><p>高层模块：由多个底层模块组成，负责复杂的操作</p><p>抽象：在Java中指的是接口或者抽象类</p><p>依赖倒置的核心思想是面向接口编程，相对于细节的多变性，抽象的稳定性更高一些。以抽象为基础搭建起来的架构比以细节搭建起来的框架稳定的多。下面我们用例子来解释下依赖倒置原则。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Bread</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"面包生产出来了"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">poduct</span>(<span class="params">Bread bread</span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"工厂开始生产"</span>);  </div><div class="line">       System.<span class="keyword">out</span>.println(book.getContent());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">Factory mFactory = <span class="keyword">new</span> Factory();</div><div class="line">mFactory.poduct(<span class="keyword">new</span> Bread());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>假如现在需求变了，不再生产面包，改为生产牛奶，这个时候工厂是做不了的，它只能生产面包。这样的话耦合性就会很高了。</p><p>遵循以来倒置的原则，我们做如下修改：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">Model</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewBread</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Model</span></span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getContent() &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"面包生产出来了"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Model</span></span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> getContent() &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"牛奶生产出来了"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> void product(Model model) &#123;</div><div class="line">System.out.println(<span class="string">"工厂开始生产"</span>)</div><div class="line">System.out.println(model.getContent());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span> [] args) &#123;</div><div class="line">Factory mFactory = <span class="keyword">new</span> <span class="type">Factory</span>();</div><div class="line">mFactory.product(<span class="keyword">new</span> <span class="type">NewBread</span>());</div><div class="line">mFactory.product(<span class="keyword">new</span> <span class="type">Milk</span>())</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>依赖有三种写法</p><h6 id="1、构造函数传递依赖"><a href="#1、构造函数传递依赖" class="headerlink" title="1、构造函数传递依赖"></a>1、构造函数传递依赖</h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</div><div class="line"><span class="function"><span class="keyword">private</span> Model model</span></div><div class="line"><span class="keyword">public</span> <span class="title">Factory</span>(<span class="params">Model model</span>) &#123;</div><div class="line"><span class="keyword">this</span>.model = model;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span> (<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"工厂开始生产"</span>)</div><div class="line">System.<span class="keyword">out</span>.println(model.getContent());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="2、setter方法传递"><a href="#2、setter方法传递" class="headerlink" title="2、setter方法传递"></a>2、setter方法传递</h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</div><div class="line"><span class="function"><span class="keyword">private</span> Model model</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModel</span>(<span class="params">Model model</span>) &#123;</div><div class="line"><span class="keyword">this</span>.model = model;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span> (<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"工厂开始生产"</span>)</div><div class="line">System.<span class="keyword">out</span>.println(model.getContent());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="3、接口传递依赖"><a href="#3、接口传递依赖" class="headerlink" title="3、接口传递依赖"></a>3、接口传递依赖</h6><p>如 最开始给的例子</p><h5 id="接口隔离原则-（Interface-segregation-Principle）"><a href="#接口隔离原则-（Interface-segregation-Principle）" class="headerlink" title="接口隔离原则 （Interface segregation Principle）"></a>接口隔离原则 （Interface segregation Principle）</h5><p>定义：客户端不应该依赖它不需要的接口，类间的依赖关系应该建立在最小的接口上。</p><p>我们用一个例子来说明下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">I</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>(<span class="params"></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>(<span class="params"></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>(<span class="params"></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">I</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类B实现接口I的方法1"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类B实现接口I的方法2"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m1();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m2();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">C</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m3();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m4();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">D</span> <span class="title">implements</span> <span class="title">I</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类D实现接口I的方法3"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span>(<span class="params"></span>)</span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类D实现接口I的方法4"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line">  A a = <span class="keyword">new</span> A();  </div><div class="line">        a.depend1(<span class="keyword">new</span> B());  </div><div class="line">        a.depend2(<span class="keyword">new</span> B());            </div><div class="line">        C c = <span class="keyword">new</span> C();  </div><div class="line">        c.depend1(<span class="keyword">new</span> D());  </div><div class="line">        c.depend2(<span class="keyword">new</span> D());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，对了类B来说 方法3和方法4是不需要的，但是由于接口I中有这两个方法，所以必须实现它。同理，对于类D来说，方法1和方法2是不需要的。这样的话就不符合接口隔离原则，下面我们修改一下以符合其原则：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">I</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>(<span class="params"></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">interface</span> <span class="title">I1</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>(<span class="params"></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">I</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类B实现接口I的方法1"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类B实现接口I的方法2"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m1();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">I i</span>) </span>&#123;</div><div class="line">i.m2();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">C</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">I1 i</span>) </span>&#123;</div><div class="line">i.m3();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">I1 i</span>) </span>&#123;</div><div class="line">i.m4();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">D</span> <span class="title">implements</span> <span class="title">I1</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类D实现接口I的方法3"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span>(<span class="params"></span>)</span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"类D实现接口I的方法4"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我理解的接口隔离原则是：建立单一的接口，尽量接口细化，不要建立臃肿的接口，接口中的方法尽量少。</p><p>接口隔离原则是对接口进行的规范约束，应该要主要一下几点（摘自《设计模式之禅》）</p><ul><li>接口尽量小</li></ul><p>接口在遵循单一职责原则的情况下，尽量减少和接口中方法，不不是无休止的细化接口。</p><ul><li>高内聚</li></ul><p>高内聚是提高接口、类、模块的处理能力，减少对外的交互。在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对外越有利，变更的风险也就越少，同时有利于降低成本</p><ul><li>定制服务</li></ul><p>根据需求分析，必要时为特殊用户提供定制的接口，尽量避免不同操作人群使用同一接口，这样会降低系统的享用速度和扩展性。</p><ul><li>接口设计是有限度的</li></ul><p>根据开发情景划分设计接口，在开发过程中接口设计的颗粒度越小，系统灵活性越高。并不是以为的将接口细化。</p><h4 id="迪米特法则（Low-of-Demeter-LoD）"><a href="#迪米特法则（Low-of-Demeter-LoD）" class="headerlink" title="迪米特法则（Low of Demeter,LoD）"></a>迪米特法则（Low of Demeter,LoD）</h4><p><code>定义</code>：一个对象应该对其他对象有最少的了解，只与直接的朋友通信。</p><p><code>朋友关系</code>：每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合关系就称为朋友关系。</p><p>迪米特法则定义的是类之间的关系要低耦合，一个类中的朋友不要太多，这样后期维护起来比较方便。</p><p>举个例子：老师清点人数，老师通过班长清点人数。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span> (<span class="params">ClassMonitor classMonitor</span>) </span>&#123;</div><div class="line">List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</div><div class="line">list.<span class="keyword">add</span>(<span class="keyword">new</span> Student());</div><div class="line">&#125;</div><div class="line">classMonitor.count(list)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">ClassMonitor</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span>(<span class="params">List&lt;Student&gt; list</span>) </span>&#123;</div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"班长说：全班的人数是。。。"</span>+list.size());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Student</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String [] args</span>) </span>&#123;</div><div class="line"><span class="keyword">new</span> Teacher().command(<span class="keyword">new</span> ClassMonitor());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在Teacher类中，一个方法调用的两个类的实例，分别是ClassMonitor和Student类。对于Teacher类来说，朋友类只有ClassMonitor，迪米特法则告诉我们只与朋友类通信，所以这种设计就违反了迪米特法则。</p><p>在Java中朋友的定义为：出现在成员变量。方法的输入输出类称为朋友类，在方法体内的类不属于朋友类</p><p>我们改进一下，以复合迪米特法则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Teacher &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span> <span class="params">(ClassMonitor classMonitor)</span> </span>&#123;</div><div class="line">classMonitor.count();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ClassMonitor &#123;</div><div class="line">List&lt;Student&gt; <span class="built_in">list</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassMonitor</span><span class="params">(List&lt;Student&gt; <span class="built_in">list</span>)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(List&lt;Student&gt; <span class="built_in">list</span>)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"班长说：全班的人数是。。。"</span>+<span class="built_in">list</span>.size());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Student &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">List&lt;Student&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123;</div><div class="line"><span class="built_in">list</span>.add(<span class="keyword">new</span> Student());</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Teacher().command(<span class="keyword">new</span> ClassMonitor(<span class="built_in">list</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>迪米特法则给类的低耦合提出了四个基本要求</p><h6 id="1-只和朋友类交流"><a href="#1-只和朋友类交流" class="headerlink" title="1. 只和朋友类交流"></a>1. 只和朋友类交流</h6><h6 id="2-朋友间也是有距离的"><a href="#2-朋友间也是有距离的" class="headerlink" title="2. 朋友间也是有距离的"></a>2. 朋友间也是有距离的</h6><pre><code>在java中的实现思想就是：类A与类B之间有依赖关系，并在方法输入或输出中创建该类的实例，那么他们属于朋友类，但是类A不可以过分操作类B的方法</code></pre><h6 id="3-是自己的就是自己的"><a href="#3-是自己的就是自己的" class="headerlink" title="3. 是自己的就是自己的"></a>3. 是自己的就是自己的</h6><pre><code>如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中</code></pre><h6 id="4-谨慎使用serializable"><a href="#4-谨慎使用serializable" class="headerlink" title="4. 谨慎使用serializable"></a>4. 谨慎使用serializable</h6><h4 id="开闭原则（Open-Closed-Principle，OCP）"><a href="#开闭原则（Open-Closed-Principle，OCP）" class="headerlink" title="开闭原则（Open Closed Principle，OCP）"></a>开闭原则（Open Closed Principle，OCP）</h4><p>定义：一个软件实体如类、模块和函数应该对扩展开发，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><p>软件实体包括：</p><ul><li>项目或软件产品中按照一定的逻辑规则划分的模块</li><li>抽象和类</li><li>方法</li></ul><p>一个实例</p><ul><li>IMilk 定义了两个属性：厂商和价格</li><li>Supermarket是超市</li><li>NovelMilk是一个具体的实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Supermarket</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;NovelMilk&gt; list = <span class="keyword">new</span> ArrayList&lt;NovelMilk&gt;();</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">list.add(<span class="keyword">new</span> NovelMilk(<span class="string">"伊利"</span>, <span class="number">60</span>))</div><div class="line">list.add(<span class="keyword">new</span> NovelMilk(<span class="string">"安慕希"</span>,<span class="number">55</span>))</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(NovelMilk milk: list) &#123;</div><div class="line">System.out.println(<span class="string">"牛奶厂商"</span> + milk.getManufacturers()+<span class="string">"\t 价格："</span>+ milk.getPrice()+ <span class="string">"元"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMilk</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getManufacturers</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NovelMilk</span> <span class="keyword">implements</span> <span class="title">IMilk</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</div><div class="line"><span class="keyword">private</span> String manufacturers;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NovelMilk</span><span class="params">(String manufacturers, <span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.manufacturers = manufacturers;</div><div class="line"><span class="keyword">this</span>.price = price;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getManufacturers</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.manufacturers;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需求更改：超市进行打折促销，规定 50元以下的 9折出售。</p><p>如果要在NovelMilk中修改的话，修改量就会很大，而且违背了开闭原则，<br>解决方案：通过扩展实现变化</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Supermarket</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;NovelMilk&gt; list = <span class="keyword">new</span> ArrayList&lt;NovelMilk&gt;();</div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">list.add(<span class="keyword">new</span> OffNovelMilk(<span class="string">"伊利"</span>, <span class="number">60</span>))</div><div class="line">list.add(<span class="keyword">new</span> OffNovelMilk(<span class="string">"安慕希"</span>,<span class="number">55</span>))</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(NovelMilk milk: list) &#123;</div><div class="line">System.out.println(<span class="string">"牛奶厂商"</span> + milk.getManufacturers()+<span class="string">"\t 价格："</span>+ milk.getPrice()+ <span class="string">"元"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMilk</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getManufacturers</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NovelMilk</span> <span class="keyword">implements</span> <span class="title">IMilk</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</div><div class="line"><span class="keyword">private</span> String manufacturers;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NovelMilk</span><span class="params">(String manufacturers, <span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.manufacturers = manufacturers;</div><div class="line"><span class="keyword">this</span>.price = price;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getManufacturers</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.manufacturers;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OffNovelMilk</span> <span class="keyword">extends</span> <span class="title">NovelMilk</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">OffNovelMilk</span><span class="params">(String manufacturers, <span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>(manufacturers, price);</div><div class="line"><span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> rePrice = <span class="keyword">super</span>.getPrice();</div><div class="line"><span class="keyword">int</span> nowPrice = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(rePrice&lt;<span class="number">50</span>)&#123;</div><div class="line">nowPrice = rePrice*<span class="number">90</span>/<span class="number">100</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">nowPrice = rePrice;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> nowPrice;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这段时间，项目基本完成，进入测试上线阶段，终于可以闲下来查漏补缺了，这里我将复习下android所需要的java基础，也可以帮大家回忆一下，今年的Google IO 大会上，Google宣布Kotlin成为Android的官方语言，有兴趣的可以去学习下，Java作为android的第一个语言，还是需要把打这部分知识打牢固的。(这部分内容只是当作自己的复习)&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.imemv.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>android面试题以及一些贮备知识</title>
    <link href="http://blog.imemv.com/2017/09/20/android-interview/"/>
    <id>http://blog.imemv.com/2017/09/20/android-interview/</id>
    <published>2017-09-20T03:20:42.000Z</published>
    <updated>2017-10-30T09:27:33.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这段时间，掘金出了个掘金秋招求职征文大赛，好想参加，但是自己貌似已经一年多没有参加过面试了（似的，我变懒了，这是不对的 ps： 捂脸哭），看见好多大佬的文章，感觉自己没有学过Android了，是时候把自己以前遗落的再次捡起来了，这里只是提供一些面试题和一些基础的知识，可能会不全，甚至会有错误（清喷），我会不定时更新的。<br><a id="more"></a></p><h3 id="JAVA知识"><a href="#JAVA知识" class="headerlink" title="JAVA知识"></a>JAVA知识</h3><h4 id="1-String、StringBuilder、StringBuffer的区别"><a href="#1-String、StringBuilder、StringBuffer的区别" class="headerlink" title="1. String、StringBuilder、StringBuffer的区别"></a>1. String、StringBuilder、StringBuffer的区别</h4><ol><li>在执行速度上：StringBuilder &gt; StringBuffer</li><li>StringBuffer与StringBuilder，它们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，不像String一样创建一些对象进行操作。</li><li>StringBuilder: 线程非安全的 StringBuffer: 线程安全的</li></ol><p>使用总结：</p><ol><li>如果要操作少量的数据用String</li><li>单线程操作字符串缓冲区下操作大量数据用StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据用StringBuffer</li></ol><h4 id="2-Overload（重载）和Override（重写）的区别"><a href="#2-Overload（重载）和Override（重写）的区别" class="headerlink" title="2.Overload（重载）和Override（重写）的区别"></a>2.Overload（重载）和Override（重写）的区别</h4><ol><li>重载是指不同的函数使用相同的函数名，但是函数的参数个数或者类型不同。重写是指派生类中重新对基类中的虚方法重新实现，函数名和参数都一样，只是实现体不同。</li><li>重写和重载都是Java多态性的不同表现。重写是父类与子类之间多态性的表现，而重载是一个类中多态性的表现。</li></ol><h3 id="Android核心"><a href="#Android核心" class="headerlink" title="Android核心"></a>Android核心</h3><h4 id="ANR"><a href="#ANR" class="headerlink" title="ANR"></a>ANR</h4><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/anr-issue.png" alt=""></p><p>解答：在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作无响应（ANR： Appplication Not Responding）对话框。<br>默认情况下，在android中的Activity最长执行时间是5秒，BroadcastReceiver的最长之行事件则是10秒。超出就会提示无响应对话框。</p><p>三种常见类型</p><ul><li><p>KeyDispathTimeout(5 seconds) –主要类型</p>  <font color="#A9A9A9" face="黑体">按键或触摸事件在特定时间内无响应</font></li><li><p>BroadcastTimeout(10 seconds)</p>  <font color="#A9A9A9" face="黑体">BroadcastReceiver在特定时间内无法处理完成</font></li><li><p>SeriviceTimeout(20 seconds) –小概率类型</p>  <font color="#A9A9A9" face="黑体">Service在特定的时间内无法处理完成</font></li></ul><h4 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h4><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/activity-life.png" alt=""></p><p>解答： 答案是 B C</p><p>对于A，正确的应该是<br><code>在AndroidManifest.xml中设置 android:configChanges=&quot;orientation|screenSize&quot;，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</code></p><p>对于D，正在操作的应用属于 前台进程，当内存不足的时候，也不会被杀死的</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>1、<img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/service1.png" alt=""></p><p>解答： bindService是异步调用和Service进行绑定，如果绑定成功，则会调用ServiceConnection的onServiceConnectes当调用bindService方法后就会回调Activity的onServiceConnected，在这个方法中会向Activity中传递一个IBinder的实例，Activity需要保存这个实例。</p><p>2、<img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/service2.png" alt=""></p><p>解答：AD<br><img src="https://uploadfiles.nowcoder.com/images/20161103/7327747_1478142515011_5191CAD3158E038AE9D09ED7CF1D5165" alt=""></p><h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h4><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/intent-issues.png" alt=""></p><p>解答： ABCD</p><ul><li>Serializable: 将Java对象序列化为二进制文件的Java序列化技术中一个较为重要的技术点，在大部分情况下，开发人员只需要实现Serializable 接口，使用ObjecInputStream和ObjectOutputStream进行对象的读写。</li><li>Charsequence 在JDK1.4中，引入CharSequence接口，实现这个接口的类有：CharBuffer、String、StringBuffer这四个类。</li><li>Parcelable：android提供了一种新的类型：Parcel。本类被用作封装数据的容器，封装后的数据可以通过Intent或IPC传递。除了基本类型意外，只有实现了Parcelable接口的类才能被放入Parcel中。</li><li>Bundle：Bundle是将数据传递到另一个上下文中或保存或回复你自己状态的数据存储方式。它的数据不是持久化状态。</li></ul><h4 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h4><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/ndk.png" alt=""></p><p>解答： ABCD</p><p><a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" target="_blank" rel="external">Android之NDK开发</a></p><h4 id="资源池"><a href="#资源池" class="headerlink" title="资源池"></a>资源池</h4><p> <img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/resouce.png" alt=""></p><p> 解答：<br>A.Message提供了消息池，有静态方法Obtain从消息池中取对象；<br>B.Thread默认不提供资源池，除非使用线程池ThreadPool管理；<br>C.AsynTask是线程池改造的，池里 默认提供（核数+1）个线程进行并发操作，最大支持（核数  * 2 + 1）个线程，超过后会丢弃其他任务；<br>D.Looper，每个Looper创建时创建一个消息队列和线程对象，也不是资源池；<br>因此答案为AC</p><h4 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h4><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/style.png" alt=""></p><p>解答：<br>官方文档定义如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A style is <span class="keyword">a</span> collection <span class="keyword">of</span> properties that specify <span class="keyword">the</span> look <span class="keyword">and</span> <span class="built_in">format</span> <span class="keyword">for</span> <span class="keyword">a</span> View <span class="keyword">or</span> window</div><div class="line"></div><div class="line">A theme is <span class="keyword">a</span> style applied <span class="built_in">to</span> <span class="keyword">an</span> entire Activity <span class="keyword">or</span> application</div></pre></td></tr></table></figure><p>补充一句：style和theme本质上就是同一东西，xml格式万千相同，只是我用在activity上我就叫它theme，我用在view上我就叫它style。唯一的区别就是style里头控制的各个属性了，某些属性是只有针对activity才能生效的。所以style可以作用在activity上，但是theme却不能反过来作用在view上</p><p>theme是被final标识了，不能被继承 ABD</p><p>未完待续。。。。。。。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这段时间，掘金出了个掘金秋招求职征文大赛，好想参加，但是自己貌似已经一年多没有参加过面试了（似的，我变懒了，这是不对的 ps： 捂脸哭），看见好多大佬的文章，感觉自己没有学过Android了，是时候把自己以前遗落的再次捡起来了，这里只是提供一些面试题和一些基础的知识，可能会不全，甚至会有错误（清喷），我会不定时更新的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>React Native 集成原生组件（Android）</title>
    <link href="http://blog.imemv.com/2017/09/15/rn-native/"/>
    <id>http://blog.imemv.com/2017/09/15/rn-native/</id>
    <published>2017-09-15T03:42:04.000Z</published>
    <updated>2017-10-11T06:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p> 最近一直在做公司项目的 4.0 版本重构，在重构中有一个需求，要求对<code>FlatList</code>的下拉刷新做统一的修改，就是要达到<code>Android</code>和<code>IOS</code>的效果一致(emmmm), <code>React Native</code>官方给的样式是两端不一样的效果，在<code>Android</code>端，是用的<code>Swiperefresh</code>。在网上搜到的一些都是很久没有更新的git项目或者就是达不到我们高大上的 UI的要求，于是乎，我走上了封装原生组件的道路。下面我说下我进行封装的几个步骤。<br><a id="more"></a></p><h3 id="二、主要步骤"><a href="#二、主要步骤" class="headerlink" title="二、主要步骤"></a>二、主要步骤</h3><h4 id="1、原生组件"><a href="#1、原生组件" class="headerlink" title="1、原生组件"></a>1、原生组件</h4><p>第一步，我们需要一个自己的原生组件，然后对组件进行包装。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PullRefreshLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是我自己写的下拉刷新的原生组件，至于自定义<code>ViewGroup</code>这里就不过多概述了。</p><h4 id="2、创建ViewManager子类"><a href="#2、创建ViewManager子类" class="headerlink" title="2、创建ViewManager子类"></a>2、创建ViewManager子类</h4><p>因为我这里的组件是<code>ViewGroup</code>,所有我的<code>ViewManager</code>要继承<code>ViewGroupManager</code>,如果是<code>View</code>的话，就是<code>SimpleViewManager</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullRefreshLayoutManager</span> <span class="keyword">extends</span> <span class="title">ViewGroupManager</span>&lt;<span class="title">PullRefreshLayout</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String REACT_CLASS = <span class="string">"RCTPullRefreshLayout"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_REFRESH = <span class="string">"refreshFunc"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_DRAG = <span class="string">"onDrag"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROP_REFRESHING = <span class="string">"isRefreshing"</span>;</div><div class="line">    <span class="keyword">private</span> ThemedReactContext aContext;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> REACT_CLASS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> PullRefreshLayout <span class="title">createViewInstance</span><span class="params">(ThemedReactContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.aContext = reactContext;</div><div class="line">        <span class="keyword">final</span> PullRefreshLayout layout = <span class="keyword">new</span> PullRefreshLayout(reactContext);</div><div class="line">        layout.setRefreshDrawable(<span class="keyword">new</span> XeDrawable(reactContext, layout));</div><div class="line">        <span class="keyword">final</span> EventDispatcher mEventDispatcher = reactContext.</div><div class="line">                getNativeModule(UIManagerModule.class).getEventDispatcher();</div><div class="line">        layout.setOnRefreshListener(<span class="keyword">new</span> PullRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                mEventDispatcher.dispatchEvent(<span class="keyword">new</span> LayoutRefreshEvent(layout.getId(), TYPE_REFRESH));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrag</span><span class="params">(<span class="keyword">float</span> percent)</span> </span>&#123;</div><div class="line">                mEventDispatcher.dispatchEvent(<span class="keyword">new</span> LayoutRefreshEvent(layout.getId(), TYPE_DRAG, percent));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> layout;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这里必须重写的两个方法 <code>getName</code>和<code>createViewInstance</code>，<br><code>getName</code>方法返回的名字用于该在JavaScript中进行调用</p><p>视图会通过<code>createViewInstance</code>方法进行创建，同时会被初始化为默认状态。然后属性的话 会通过<code>updateView</code>方法进行更新,所以我们一般对齐做一些初始化的东西，我这里是设置下拉刷新的样式以及刷新的回调，<br>细心的大佬们可能会发现，这里有一个 <code>EventDispatcher</code>,这个在以后会讲到。</p><h4 id="3、使用-ReactProp-或者-ReactPropGroup-注解相关方法对外可以被调用设置属性"><a href="#3、使用-ReactProp-或者-ReactPropGroup-注解相关方法对外可以被调用设置属性" class="headerlink" title="3、使用@ReactProp(或者@ReactPropGroup)注解相关方法对外可以被调用设置属性"></a>3、使用@ReactProp(或者@ReactPropGroup)注解相关方法对外可以被调用设置属性</h4><p>有时候我们会看到有一些RN的组件的一些属性，比如说<code>Image</code>的<code>src</code>,如果需要提供属性方便在JavaScript中调用的话，那么需要设置方法使用@ReactProp(或者@ReactPropGroup)进行注解，例如：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ReactProp</span>(name = PROP_REFRESHING)</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setRefresing</span> <span class="params">(PullRefreshLayout layout, <span class="keyword">boolean</span> isRefreshing)</span> </span>&#123;</div><div class="line">     layout.setRefreshing(isRefreshing);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>设置方法的第一个参数就是实例本身，第二个参数就是需要设置的属性值。该方法的返回值必须是void，访问权限必须是public。其中在JavaScript的获取的属性的类型由第二个参数的类型决定。其支持的类型为：<code>boolean</code>、<code>int</code>、<code>float</code>、<code>String</code>、<code>Boolean</code>、<code>Integer</code>、<code>ReadableArray</code>、<code>ReadableMap</code></p><p>使用@ReactProp注解的 name是指向JavaScript中的调用的属性名。<br>除了name之外，@ReactProp注解还接受一些其他属性，例如：<code>defaultBoolean、</code>defaultInt<code>、</code>defaultFloat`。其对应的类型必须是（boolean，int，float）null为默认值。</p><p>@ReactPropGroup注解的使用方法，目前我还没搞明白，等以后搞明白，我会及时补充的。</p><h3 id="4、事件"><a href="#4、事件" class="headerlink" title="4、事件"></a>4、事件</h3><p>这里，我举个例子，在<code>Image</code>使用中，有一个<code>onLoad</code>，我们可以在其回调的时候写自己的逻辑，那么我们在自己封装的时候如果也有着样的需求的话该如何做呢？</p><p>这里就要说我们之后留了一个悬念的<code>EventDispatcher</code>,我们先看下代码，可能会更加直观一点。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> EventDispatcher mEventDispatcher = reactContext.</div><div class="line">         getNativeModule(UIManagerModule.class).getEventDispatcher();</div><div class="line"> layout.setOnRefreshListener(<span class="keyword">new</span> PullRefreshLayout.OnRefreshListener() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">         mEventDispatcher.dispatchEvent(<span class="keyword">new</span> LayoutRefreshEvent(layout.getId(), TYPE_REFRESH));</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDrag</span><span class="params">(<span class="keyword">float</span> percent)</span> </span>&#123;</div><div class="line">         mEventDispatcher.dispatchEvent(<span class="keyword">new</span> LayoutRefreshEvent(layout.getId(), TYPE_DRAG, percent));</div><div class="line">     &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure><p>这个事件名<code>onRefresh</code>在JavaScript端映射到<code>onRefresh</code>回调属性上（这两个是通过 getId关联在一起的）</p><h4 id="5、创建-Event"><a href="#5、创建-Event" class="headerlink" title="5、创建 Event"></a>5、创建 Event</h4><p>当然 这个不是必须的，但是我还是建议创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutRefreshEvent</span> <span class="keyword">extends</span> <span class="title">Event</span>&lt;<span class="title">LayoutRefreshEvent</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mEventType;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> mPercent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LayoutRefreshEvent</span><span class="params">(<span class="keyword">int</span> viewId, String mEventType)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(viewId);</div><div class="line">        <span class="keyword">this</span>.mEventType = mEventType;</div><div class="line">        <span class="keyword">this</span>.mPercent = <span class="number">1f</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LayoutRefreshEvent</span><span class="params">(<span class="keyword">int</span> viewTag, String mEventType, <span class="keyword">float</span> mPercent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(viewTag);</div><div class="line">        <span class="keyword">this</span>.mEventType = mEventType;</div><div class="line">        <span class="keyword">this</span>.mPercent = mPercent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEventName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mEventType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(RCTEventEmitter rctEventEmitter)</span> </span>&#123;</div><div class="line">        WritableMap eventData = Arguments.createMap();</div><div class="line">        eventData.putDouble(<span class="string">"percent"</span>, mPercent);</div><div class="line">        rctEventEmitter.receiveEvent(getViewTag(), getEventName(), eventData);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>连个构造方法我就不多说了， 这里说下 <code>getEventName</code>和<code>dispath</code><br><code>getEventName</code>返回我们映射到JavaScript上的哪个毁掉属性上，<br>看下这句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">rctEventEmitter</span><span class="selector-class">.receiveEvent</span>(<span class="selector-tag">getViewTag</span>(), <span class="selector-tag">getEventName</span>(), <span class="selector-tag">eventData</span>);</div></pre></td></tr></table></figure><p>这里最主要的部分，这句的意思是 携带参数映射到JavaScript上，稍后我们看下 JavaScript上如何做。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mEventDispatcher</span><span class="selector-class">.dispatchEvent</span>(<span class="selector-tag">new</span> <span class="selector-tag">LayoutRefreshEvent</span>(<span class="selector-tag">layout</span><span class="selector-class">.getId</span>(), <span class="selector-tag">TYPE_REFRESH</span>));</div></pre></td></tr></table></figure><h4 id="6、创建Package，注册Manager"><a href="#6、创建Package，注册Manager" class="headerlink" title="6、创建Package，注册Manager"></a>6、创建Package，注册Manager</h4><p>这里就应该比较熟悉了，封装原生的东西 都会创建的。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullRefreshLayoutPackage</span>  <span class="keyword">implements</span> <span class="title">ReactPackage</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> Collections.<span class="title">emptyList</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;Class&lt;? <span class="keyword">extends</span> JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> Collections.<span class="title">emptyList</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.&lt;ViewManager&gt;asList(<span class="keyword">new</span> PullRefreshLayoutManager());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 这次，我们创建的不是 Module，我们的注册要放在 Managers里，如上。</p><h4 id="7、Application添加-Package"><a href="#7、Application添加-Package" class="headerlink" title="7、Application添加 Package"></a>7、Application添加 Package</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">          <span class="keyword">new</span> MainReactPackage(),</div><div class="line">...</div><div class="line"><span class="keyword">new</span> PullRefreshLayoutPackage()</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="8、实现JavaScript模块"><a href="#8、实现JavaScript模块" class="headerlink" title="8、实现JavaScript模块"></a>8、实现JavaScript模块</h4><p>下面最后一步就是创建JavaScript层，定义Java和JavaScript的接口层。大部分的功能都是通过React 底层的Java和Javas进行完成下面就是说需要使用propType属性进行设置属性的类型。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">import &#123;</div><div class="line">  View,</div><div class="line">  requireNativeComponent</div><div class="line">&#125; from <span class="string">'react-native'</span></div><div class="line"></div><div class="line">let PullRefreshLayout = &#123;</div><div class="line">  displayName: <span class="string">'PullRefreshLayout'</span>,</div><div class="line">  propTypes: &#123;</div><div class="line">    isRefreshing: React<span class="selector-class">.PropTypes</span><span class="selector-class">.bool</span>,</div><div class="line">    refreshFunc: React<span class="selector-class">.PropTypes</span><span class="selector-class">.func</span>,</div><div class="line">    onDrag: React<span class="selector-class">.PropTypes</span><span class="selector-class">.func</span>,</div><div class="line">    ..<span class="selector-class">.View</span><span class="selector-class">.propTypes</span>  <span class="comment">// 支持View组件的所有属性</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const RCTPullRefreshLayout = requireNativeComponent(<span class="string">'RCTPullRefreshLayout'</span>, PullRefreshLayout)</div><div class="line"></div><div class="line">export default RCTPullRefreshLayout</div></pre></td></tr></table></figure><p>requireNativeComponent会接受两个参数，第一个参数就是之前我们getName方法返回的名称（代表视图的名字），第二个参数表示描述设置的对象。当前对象的name的值必须设置恰当，因为该值会在调试中进行打印。该对象海需要进行声明propType字段，用来反映原生视图。同时propTyes对象可以用来检查用户使用的原生视图的正确与否。</p><p>如果你需要进行一些自定义的事件，那么你可以通过一个普通的React组件进行封装原生组件，那么requireNativeComponent的第二个参数可以传入封装的组件而不是我们上面的<code>PullRefreshLayout</code>,这里我们看下官网给的例子：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line">   ...</div><div class="line">   public void onReceiveNativeEvent() &#123;</div><div class="line">      <span class="type">WritableMap</span> event = <span class="type">Arguments</span>.createMap();</div><div class="line">      event.putString(<span class="string">"message"</span>, <span class="string">"MyMessage"</span>);</div><div class="line">      <span class="type">ReactContext</span> reactContext = (<span class="type">ReactContext</span>)getContext();</div><div class="line">      reactContext.getJSModule(<span class="type">RCTEventEmitter</span>.<span class="keyword">class</span>).receiveEvent(</div><div class="line">          getId(),</div><div class="line">          <span class="string">"topChange"</span>,</div><div class="line">          event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  constructor() &#123;</div><div class="line">    <span class="keyword">this</span>._onChange = <span class="keyword">this</span>._onChange.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  _onChange(event: <span class="type">Event</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.onChangeMessage) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.props.onChangeMessage(event.nativeEvent.message);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">RCTMyCustomView</span> &#123;...<span class="keyword">this</span>.props&#125; onChange=&#123;<span class="keyword">this</span>._onChange&#125; /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">MyCustomView</span>.propTypes = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Callback that is called continuously when the user is dragging the map.</div><div class="line">   */</div><div class="line">  onChangeMessage: <span class="type">React</span>.<span class="type">PropTypes</span>.func,</div><div class="line">  ...</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="type">RCTMyCustomView</span> = requireNativeComponent(`<span class="type">RCTMyCustomView</span>`, <span class="type">MyCustomView</span>, &#123;</div><div class="line">  nativeOnly: &#123;onChange: <span class="literal">true</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>可以看到，上面用到<code>nativeOnly</code> 。有时候有一些特殊的属性，想从原生组件中导出，但是又不希望它们成为对应React封装组件的属性。举个例子，<code>Switch</code>组件可能在原生组件上有一个<code>onChange</code>事件，然后在封装类中导出<code>onValueChange</code>回调属性。这个属性在调用的时候会带上Switch的状态作为参数之一。这样的话你可能不希望原生专用的属性出现在API之中，也就不希望把它放到propType里。可是如果你不放的话，优惠出现一个报错。解决方案就是带上<code>nativeOnly</code>选项。（ps： 这是官网的原话，我觉得比我自己说的话要好，就直接拿过来了）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里只是介绍了 android端封装原生组件的步骤，记得但开始做这个的时候，脑子一片空白，然后各种查资料。果然是书到用时方恨少！！！！！</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://reactnative.cn/docs/0.48/native-component-android.html#content" target="_blank" rel="external">原生UI组件-官网</a></p><p><a href="https://juejin.im/entry/5724249671cfe400576a21f9" target="_blank" rel="external">React Native 进阶之原生 UI 组件封装详解</a></p><p><a href="http://www.jianshu.com/p/f26d994ea765" target="_blank" rel="external">React-Native之Android:封装原生UI组件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt; 最近一直在做公司项目的 4.0 版本重构，在重构中有一个需求，要求对&lt;code&gt;FlatList&lt;/code&gt;的下拉刷新做统一的修改，就是要达到&lt;code&gt;Android&lt;/code&gt;和&lt;code&gt;IOS&lt;/code&gt;的效果一致(emmmm), &lt;code&gt;React Native&lt;/code&gt;官方给的样式是两端不一样的效果，在&lt;code&gt;Android&lt;/code&gt;端，是用的&lt;code&gt;Swiperefresh&lt;/code&gt;。在网上搜到的一些都是很久没有更新的git项目或者就是达不到我们高大上的 UI的要求，于是乎，我走上了封装原生组件的道路。下面我说下我进行封装的几个步骤。&lt;br&gt;
    
    </summary>
    
    
      <category term="React Native" scheme="http://blog.imemv.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.0 行为变更之FileProvider</title>
    <link href="http://blog.imemv.com/2017/06/09/file-provider/"/>
    <id>http://blog.imemv.com/2017/06/09/file-provider/</id>
    <published>2017-06-09T05:48:45.000Z</published>
    <updated>2017-10-11T06:14:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><p>之前在做拍照功能的时候，在7.0系统的手机上会出现问题，在看了看官网的<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes.html" target="_blank" rel="external">Android 7.0行为变更</a>,才知道问题出在了哪里，适配的话必须去除项目中传递<code>file://</code>类似格式的uri了。<br><a id="more"></a><br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在<span class="number">7.0</span> 以及以上的系统中，如果传递<span class="keyword">file</span>:<span class="comment">// 会触发FileUriExposedException异常</span></div></pre></td></tr></table></figure></p><p>在这里我仅把我遇到的问题以及解决办法说下，便于记录，没有什么技术含量的</p><p><img src="http://img.mp.itc.cn/upload/20170325/525cb4f28a4c426fb336116f810228e3.jpeg" alt=""></p><h3 id="二、拍照中的问题"><a href="#二、拍照中的问题" class="headerlink" title="二、拍照中的问题"></a>二、拍照中的问题</h3><p>拍照的代码我想大家都会熟悉，我们制定拍照的图片路径，intent传递一个uri给相机应用。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_LAUNCH_IMAGE_LIBRARY = <span class="number">13002</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Uri mCameraCaptureURI;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> launchCamera() &#123;</div><div class="line"><span class="comment">// 判断相机是否可用以及sd卡是否可用、相机权限是否开启</span></div><div class="line">...</div><div class="line"><span class="keyword">int</span> requestCode = REQUEST_LAUNCH_IMAGE_LIBRARY;</div><div class="line">Intent cameraIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">String filename = <span class="keyword">new</span> StringBuilder(<span class="string">"image-"</span>).<span class="keyword">append</span>(UUID.randomUUID().toString()).<span class="keyword">append</span>(<span class="string">".jpg"</span>).toString();</div><div class="line"><span class="keyword">File</span> path = mContext.getExernalFilesDir(Environment.DIRECTORY_PICTURES)</div><div class="line"><span class="keyword">File</span> imageFile = <span class="keyword">new</span> <span class="keyword">File</span>(path, filename);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            path.mkdirs();</div><div class="line">            imageFile.createNewFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">mCameraCaptureURI = Uri.fromFile(imageFile);</div><div class="line">cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, mCameraCaptureURI);</div><div class="line">        <span class="keyword">if</span> (cameraIntent.resolveActivity(mActivity.getPackageManager()) == <span class="keyword">null</span>) &#123;</div><div class="line">            showToast(<span class="string">"无法调起相机"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mActivity.startActivityForResult(cameraIntent, requestCode);</div><div class="line">        &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onActivityResult(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data) &#123;</div><div class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">        <span class="keyword">if</span> (resultCode == RESULT_OK &amp;&amp; requestCode == REQUEST_LAUNCH_IMAGE_LIBRARY) &#123;</div><div class="line">...</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><img src="http://d.hiphotos.baidu.com/zhidao/wh%3D450%2C600/sign=85d5e4568f94a4c20a76ef2f3bc437e3/e4dde71190ef76c6f4b2fe729516fdfaaf516702.jpg" alt="我不是效果图"></p><p>哈哈，我知道,没图你们是不会往下看的（ps： 效果图我不给你贴！ 滑稽）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: android<span class="selector-class">.os</span><span class="selector-class">.FileUriExposedException</span>:</div><div class="line">    file:<span class="comment">///storage/emulated/0/image-1085d49f-76f0-495f-8bdb-38b972299e00.jpg</span></div><div class="line">        exposed beyond app through ClipData<span class="selector-class">.Item</span><span class="selector-class">.getUri</span>()</div><div class="line">    at android<span class="selector-class">.os</span><span class="selector-class">.StrictMode</span><span class="selector-class">.onFileUriExposed</span>(StrictMode<span class="selector-class">.java</span>:<span class="number">1932</span>)</div><div class="line">    at android<span class="selector-class">.net</span><span class="selector-class">.Uri</span><span class="selector-class">.checkFileUriExposed</span>(Uri<span class="selector-class">.java</span>:<span class="number">2348</span>)</div></pre></td></tr></table></figure><p>我的天，在7.0系统的手机上报错了，我去找原因！～</p><p>我们看下官网给出的解释：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对于面向 Android <span class="number">7.0</span> 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 <span class="string">file:</span><span class="comment">// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。</span></div><div class="line"></div><div class="line">要在应用间共享文件，您应发送一项 <span class="string">content:</span><span class="comment">// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件</span></div></pre></td></tr></table></figure><p><img src="http://img.tvmao.com/thumb/tvcolumn/0/409/360x270.jpg" alt=""></p><p>官网也给出了解决的办法，那就是用 <code>FileProvider</code>. 我们看下他的实现步骤</p><h3 id="使用FileProvider"><a href="#使用FileProvider" class="headerlink" title="使用FileProvider"></a>使用FileProvider</h3><p>在这里，对于<code>FileProvider</code>的使用，官网上给出了详细的步骤，有时间的话可以看下。<br><a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html" target="_blank" rel="external">FileProvider</a></p><h4 id="1-声明provider"><a href="#1-声明provider" class="headerlink" title="1.声明provider"></a>1.声明provider</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">provider</span></span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"$</span><span class="template-variable">&#123;applicationId&#125;</span><span class="xml"><span class="tag"><span class="string">.provider"</span></span></span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">                <span class="attr">android:resource</span>=<span class="string">"@xml/provider_path"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div></pre></td></tr></table></figure><p>FileProvider 是<code>ContentProvider</code>的子类， 所以需要声明一下下<br>meta-data里的 resource是自己写的xml文件。关于其中其他的配置在后面会讲道，莫急。</p><h4 id="2-编写xml"><a href="#2-编写xml" class="headerlink" title="2.编写xml"></a>2.编写xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">"app_images"</span> <span class="attr">path</span>=<span class="string">"."</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure><p>在<code>path</code>节点 支持以下几个字节点：</p><ul><li><code>&lt;root-path/&gt;</code> 代表设备的根目录<code>new File(&quot;/&quot;)</code>;</li><li><code>&lt;files-path/&gt;</code> 代表<code>context.getFilesDir()</code>;</li><li><code>&lt;cache-path/&gt;</code> 代表<code>context.getCacheDir()</code>;</li><li><code>&lt;external-path/&gt;</code> 代表<code>Environment.getExternalStorageDirectory()</code>;</li><li><code>&lt;external-files-path/&gt;</code>代表<code>context.getExternalFilesDirs()</code>;</li><li><code>&lt;external-cache-path/&gt;</code>代表<code>getExternalCacheDirs()</code>;</li></ul><p>每个节点支持两个属性：</p><ul><li><code>path</code> 需要临时授权访问的路径 . 代表所有路径</li><li><code>name</code> 就是你给这个路径起的名字</li></ul><p>我们所要做的是用 <code>content://uri</code>来替代<code>file://uri</code>,所以我们需要一个虚拟的路径进行映射，这就是我们要编写这个xml文件的原因。通过path确定访问目录，通过name映射真实的路径。</p><h4 id="使用-FileProvider"><a href="#使用-FileProvider" class="headerlink" title="使用 FileProvider"></a>使用 FileProvider</h4><p>这里我只贴一下核心的代码，其他的和之前写的是一样的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 之前</span></div><div class="line">mCameraCaptureURI = <span class="built_in">Uri</span>.fromFile(imageFile);</div><div class="line"><span class="comment">// 使用FileProvider</span></div><div class="line"><span class="keyword">final</span> <span class="built_in">String</span> packageName = context.getApplicationContext().getPackageName();</div><div class="line">            <span class="keyword">final</span> <span class="built_in">String</span> authority =  <span class="keyword">new</span> StringBuilder(packageName).append(<span class="string">".provider"</span>).toString();</div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                mCameraCaptureURI = FileProvider.getUriForFile(context, authority, file);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span>(IllegalArgumentException e)</div><div class="line">            &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div></pre></td></tr></table></figure><p>第二个参数就是我们之前在<code>AndroidManifest.xml</code>里配置的那个<code>authority</code></p><p>在此，可能会有疑问 为什么配置的时候</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>exported=<span class="string">"false"</span></div><div class="line"><span class="symbol">android:</span>grantUriPermissions=<span class="string">"true"</span></div></pre></td></tr></table></figure><p>要这么写，<br>这里就要看下源码了</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override<span class="keyword"></span></div><div class="line">public void attachInfo(Context context, ProviderInfo info) &#123;</div><div class="line">    super.attachInfo(context, info);</div><div class="line"></div><div class="line">    // Sanity<span class="built_in"> check </span>our security</div><div class="line">   <span class="built_in"> if </span>(info.exported) &#123;</div><div class="line">       <span class="built_in"> throw </span>new SecurityException(<span class="string">"Provider must not be exported"</span>);</div><div class="line">    &#125;</div><div class="line">   <span class="built_in"> if </span>(!info.grantUriPermissions) &#123;</div><div class="line">       <span class="built_in"> throw </span>new SecurityException(<span class="string">"Provider must grant uri permissions"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mStrategy = getPathStrategy(context, info.authority);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>知道了吧，使用FileProvider之后我们在7.0的系统上拍照是没有问题了，那么是否可以做到兼容呢，我们在5.0 的手机上运行下，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.SecurityException</span>: Permission Denial: opening provider android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.content</span><span class="selector-class">.FileProvider</span> from ProcessRecord&#123;<span class="number">52</span>b029b8 <span class="number">1670</span>:com<span class="selector-class">.android</span><span class="selector-class">.camera</span>/u0a36&#125; (pid=<span class="number">1670</span>, uid=<span class="number">10036</span>) that is not exported from uid <span class="number">10052</span></div><div class="line">at android<span class="selector-class">.os</span><span class="selector-class">.Parcel</span><span class="selector-class">.readException</span>(Parcel<span class="selector-class">.java</span>:<span class="number">1465</span>)</div><div class="line">at android<span class="selector-class">.os</span><span class="selector-class">.Parcel</span><span class="selector-class">.readException</span>(Parcel<span class="selector-class">.java</span>:<span class="number">1419</span>)</div><div class="line">at android<span class="selector-class">.app</span><span class="selector-class">.ActivityManagerProxy</span><span class="selector-class">.getContentProvider</span>(ActivityManagerNative<span class="selector-class">.java</span>:<span class="number">2848</span>)</div><div class="line">at android<span class="selector-class">.app</span><span class="selector-class">.ActivityThread</span><span class="selector-class">.acquireProvider</span>(ActivityThread<span class="selector-class">.java</span>:<span class="number">4399</span>)</div></pre></td></tr></table></figure><p>我的天， 又报错了，这次是<code>Permission Denial</code></p><p><img src="http://img4.imgtn.bdimg.com/it/u=4080811263,601276283&amp;fm=11&amp;gp=0.jpg" alt=""></p><p>通过万能的google了解到 需要给uri开通 读写的权限</p><h5 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h5><p>利用 <code>context. grantUriPermission</code> 对所有包都开启权限（ps：有时候并不晓得会选择哪个app）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;ResolveInfo&gt; resInfoList = getPackageManager()</div><div class="line">               .queryIntentActivities(takePictureIntent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class="line">       <span class="keyword">for</span> (ResolveInfo resolveInfo : resInfoList) &#123;</div><div class="line">           <span class="built_in">String</span> packageName = resolveInfo.activityInfo.packageName;</div><div class="line">           grantUriPermission(packageName, fileUri, Intent.FLAG_GRANT_READ_URI_PERMISSION</div><div class="line">                   | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">       &#125;</div></pre></td></tr></table></figure><h5 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h5><p>上一个虽然可以解决，但是觉得有些麻烦，我可以根据系统的版本进行判断的呀</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">    fileUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.lenny.a7.provider"</span>, <span class="keyword">file</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    fileUri = Uri.fromFile(<span class="keyword">file</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="安装apk"><a href="#安装apk" class="headerlink" title="安装apk"></a>安装apk</h3><p>我们知道以前我们安装apk，是这么写的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void InstallAPK(String filePath)&#123;</div><div class="line">     Intent i = new Intent(Intent.ACTION_VIEW);</div><div class="line">     i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">     i.setDataAndType(Uri.parse(<span class="string">"file://"</span> + filePath),<span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line">     mContext.startActivity(i);</div><div class="line">     System.<span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>在7.0系统以上的手机上又出现 <code>android.os.FileUriExposedException</code>异常。在上一个例子中，我们知道了如何处理：根据系统进行处理。可是这次出现了<br><code>Permission Denial</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ava<span class="selector-class">.lang</span><span class="selector-class">.SecurityException</span>: Permission Denial:</div><div class="line">opening provider android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.content</span><span class="selector-class">.FileProvider</span></div><div class="line">        from ProcessRecord&#123;<span class="number">18570</span>a <span class="number">27107</span>:com<span class="selector-class">.google</span><span class="selector-class">.android</span><span class="selector-class">.packageinstaller</span>/u0a26&#125; (pid=<span class="number">27107</span>, uid=<span class="number">10026</span>) that is not exported from UID <span class="number">10004</span></div></pre></td></tr></table></figure><p>我们可以在其加上上一个例子里的思路一的代码，加上权限。</p><p>通过与大神交流之后，知道原来还有一种方式可以搞定，那就是：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">intent</span>.addFlags(<span class="keyword">Intent</span>.FLAG_GRANT_READ_URI_PERMISSION | <span class="keyword">Intent</span>.FLAG_GRANT_WRITE_URI_PERMISSION);</div></pre></td></tr></table></figure><p>那么我们的解决办法也就可以这样：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> static Uri getUriFormFile(Context context, String filePath, <span class="keyword">Intent</span> <span class="keyword">intent</span>) &#123;</div><div class="line">    // 兼容<span class="number">7.0</span>系统 uri <span class="keyword">file</span>:// 的坑</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = new <span class="keyword">File</span>(filePath);</div><div class="line">        <span class="keyword">intent</span>.addFlags(<span class="keyword">Intent</span>.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">        <span class="keyword">intent</span>.addFlags(<span class="keyword">Intent</span>.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">        <span class="keyword">final</span> String packageName = context.getPackageName();</div><div class="line">        <span class="keyword">final</span> String authority =  new StringBuilder(packageName).append(<span class="string">".provider"</span>).toString();</div><div class="line">        <span class="keyword">return</span> FileProvider.getUriForFile(context, authority, <span class="keyword">file</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> Uri.parse(<span class="string">"file://"</span> + filePath);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时，你肯定要问为什么之前拍照的时候不用<code>addFlag</code>的方式呢？</p><p>哈哈，这位同学你的问题问的很到位呀。</p><p>因为addFlags主要用于setData，setDataAndType以及setClipData（注意：4.4时，并没有将ACTION_IMAGE_CAPTURE转为setClipData实现）这种方式。</p><p>所以addFlags方式对于ACTION_IMAGE_CAPTURE在5.0以下是无效的，所以需要使用grantUriPermission，如果是正常的通过setData分享的uri，使用addFlags是没有问题的（可以写个简单的例子测试下）</p><p>这时候，你又会问了，为什么拍照的时候没有设置就没有报错呢？</p><p>哈哈，这位同学你的问题好多呀。</p><p>拍照的时候， intent的action是<code>ACTION_IMAGE_CAPTURE</code>,startActivity后会调用 <code>intent.migrateExtraStreamToClipData();</code>方法。</p><p>在21之后，会有这段逻辑 (ps: 不要问我怎么知道的)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (MediaStore.ACTION_IMAGE_CAPTURE.<span class="keyword">equals</span>(action)</div><div class="line">        || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.<span class="keyword">equals</span>(action)</div><div class="line">        || MediaStore.ACTION_VIDEO_CAPTURE.<span class="keyword">equals</span>(action)) &#123;</div><div class="line">    final Uri output;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        output = getParcelableExtra(MediaStore.EXTRA_OUTPUT);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (output != <span class="literal">null</span>) &#123;</div><div class="line">        setClipData(ClipData.newRawUri(<span class="string">""</span>, output));</div><div class="line">        addFlags(FLAG_GRANT_WRITE_URI_PERMISSION|FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">cameraIntent</span><span class="selector-class">.putExtra</span>(<span class="selector-tag">MediaStore</span><span class="selector-class">.EXTRA_OUTPUT</span>, <span class="selector-tag">mCameraCaptureURI</span>);</div></pre></td></tr></table></figure><p>看到这里就会知道它会直接给我们添加权限。（在 21 之后）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> android 7.0 变更还有其他的变更，比如多窗口支持、屏幕缩放等。和我们关系最大的就是这个了。你可以将其写在一个工具类里面，有利于代码的优化，这里有鸿洋大神的例子<a href="https://github.com/hongyangAndroid/FitAndroid7" target="_blank" rel="external">FitAndroid7</a>可以学习一下</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、简述&quot;&gt;&lt;a href=&quot;#一、简述&quot; class=&quot;headerlink&quot; title=&quot;一、简述&quot;&gt;&lt;/a&gt;一、简述&lt;/h3&gt;&lt;p&gt;之前在做拍照功能的时候，在7.0系统的手机上会出现问题，在看了看官网的&lt;a href=&quot;https://developer.android.com/about/versions/nougat/android-7.0-changes.html&quot;&gt;Android 7.0行为变更&lt;/a&gt;,才知道问题出在了哪里，适配的话必须去除项目中传递&lt;code&gt;file://&lt;/code&gt;类似格式的uri了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>消息传递机制之EventBus</title>
    <link href="http://blog.imemv.com/2017/05/05/eventbus-first/"/>
    <id>http://blog.imemv.com/2017/05/05/eventbus-first/</id>
    <published>2017-05-05T09:17:52.000Z</published>
    <updated>2017-10-11T06:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>每天进步一点，没准哪天自己也会成为大佬呢。</p><p>现在，我开始研究最近特别火的消息传递机制<code>EventBus</code>.以前，对于<code>activity</code>和<code>fragment</code>之间的通信可以用接口回调的方式实现，使用起来会略有些麻烦。现在可以用<code>EventBus</code>，好用简单。</p><p>官方说明是这样定义的：<code>EventBus</code>是针对<code>Android</code>的发布／订阅事件总线。轻松实现各个组件之间的传递消息，可读性高，耦合度低。下面以<code>3.0</code>为例，学习和记录下其使用。<br><a id="more"></a></p><h3 id="使用EventBus的三个步骤"><a href="#使用EventBus的三个步骤" class="headerlink" title="使用EventBus的三个步骤"></a>使用EventBus的三个步骤</h3><h4 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> final <span class="keyword">String</span> message;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> MessageEvent(<span class="keyword">String</span> message) &#123;</div><div class="line">        <span class="built_in">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="准备订阅者"><a href="#准备订阅者" class="headerlink" title="准备订阅者"></a>准备订阅者</h4><p>订阅者实现事件处理方法，在事件发布时被调用。被调用的方法要用<code>@Subscribe</code>注释。<br>（在3.0 中可以自由选择方法名）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">freshed</span><span class="params">(utils.MessageEvent messageEvent)</span> </span>&#123;</div><div class="line">     Log.d(<span class="string">"MainActivity"</span>, <span class="string">"_------------------MainActivity"</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h5 id="注册订阅以及取消订阅"><a href="#注册订阅以及取消订阅" class="headerlink" title="注册订阅以及取消订阅"></a>注册订阅以及取消订阅</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>官方上是在<code>onStop</code>中取消订阅，个人建议在<code>onDestroy</code>中。</p><h4 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="keyword">new</span> <span class="type">MessageEvent</span>(<span class="string">"Hello!"</span>));</div></pre></td></tr></table></figure><h3 id="切换线程"><a href="#切换线程" class="headerlink" title="切换线程"></a>切换线程</h3><p><code>EventBus</code>可以简单的实现线程间的切换，其中包括后台线程、主线程（UI线程）、异步线程。</p><h4 id="POSTING"><a href="#POSTING" class="headerlink" title="POSTING"></a>POSTING</h4><p>默认调用方式，在调用post方法的线程执行，避免了线程切换，性能开销最少   </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Called in the same thread (default)</span></div><div class="line"><span class="comment">// ThreadMode is optional here</span></div><div class="line">@Subscribe(threadMode = ThreadMode.POSTING)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">    log(<span class="keyword">event</span>.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="MAIN"><a href="#MAIN" class="headerlink" title="MAIN"></a>MAIN</h4><p> 主线程（UI线程）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Called in Android UI's main thread</span></div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>) </span>&#123;</div><div class="line">textField.setText(<span class="keyword">event</span>.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="BACKGROUND"><a href="#BACKGROUND" class="headerlink" title="BACKGROUND"></a>BACKGROUND</h4><p>后台线程。这个会分两种情况：如果post的线程不是主线程，就在当前线程中调用。如果是主线程， EventBus 就会使用一个单独的后台线程来顺序发送所有的事件。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Called in the background thread</span></div><div class="line">@Subscribe(threadMode = ThreadMode.BACKGROUND)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>)</span>&#123;</div><div class="line">    saveToDisk(<span class="keyword">event</span>.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="ASYNC"><a href="#ASYNC" class="headerlink" title="ASYNC"></a>ASYNC</h4><p>异步线程，通常用来执行比较耗时的操作，比如网络请求<br>EventBus内部使用了线程池，但是要尽量避免大量长时间运行的异步线程，限制并发线程数量可以通过EventBusBuilder修改，默认使用Executors.newCachedThreadPool()</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Called in a separate thread</span></div><div class="line">@Subscribe(threadMode = ThreadMode.ASYNC)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>)</span>&#123;</div><div class="line">    backend.send(<span class="keyword">event</span>.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="EventBusBuilder配置"><a href="#EventBusBuilder配置" class="headerlink" title="EventBusBuilder配置"></a>EventBusBuilder配置</h3><p>EventBus提供了许多配置，方便我们实现不同的需求。</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">EventBus</span> eventBus = <span class="function"><span class="keyword">new</span> <span class="title">EventBus</span>();</span></div><div class="line">    <span class="comment">//下面这一条的效果是完全一样的</span></div><div class="line">    <span class="title">EventBus</span> <span class="title">eventBus</span> = <span class="title">EventBus</span>.<span class="title">builder</span>().<span class="title">build</span>();</div><div class="line">    <span class="comment">//修改默认实现的配置，记住，必须在第一次EventBus.getDefault()之前配置，且只能设置一次。建议在application.onCreate()调用</span></div><div class="line">    <span class="title">EventBus</span>.<span class="title">builder</span>().<span class="title">throwSubscriberException</span>(<span class="type">BuildConfig</span>.<span class="type">DEBUG</span>).<span class="title">installDefaultEventBus</span>();</div></pre></td></tr></table></figure><h3 id="StickyEvent"><a href="#StickyEvent" class="headerlink" title="StickyEvent"></a>StickyEvent</h3><p>粘性事件类似粘性广告，就是一次注册永久使用的那种。<br>使用的方式是：发送时采用postSticky</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().postSticky(<span class="keyword">new</span> <span class="type">MessageEvent</span>(<span class="string">"Hello everyone!"</span>));</div></pre></td></tr></table></figure><p>接受时添加一个sticky = true</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UI updates must run on MainThread</span></div><div class="line">@Subscribe(sticky = <span class="literal">true</span>, threadMode = ThreadMode.MAIN)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>) </span>&#123;   </div><div class="line">    textField.setText(<span class="keyword">event</span>.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="清除粘性事件"><a href="#清除粘性事件" class="headerlink" title="清除粘性事件"></a>清除粘性事件</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MessageEvent stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent.class);</div><div class="line">// Better<span class="built_in"> check </span>that an event was actually posted before</div><div class="line">if(stickyEvent != null) &#123;</div><div class="line">    // <span class="string">"Consume"</span> the sticky event</div><div class="line">    EventBus.getDefault().removeStickyEvent(stickyEvent);</div><div class="line">    // Now do something with it</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="优先事项和事件取消"><a href="#优先事项和事件取消" class="headerlink" title="优先事项和事件取消"></a>优先事项和事件取消</h3><h4 id="用户优先级"><a href="#用户优先级" class="headerlink" title="用户优先级"></a>用户优先级</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// priority越大，级别越高，默认是0</span></div><div class="line"><span class="comment">// 不影响具有不同线程的订阅者之间的顺序</span></div><div class="line"><span class="meta">@Subscribe</span>(priority = <span class="number">1</span>);</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MessageEvent event)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="取消事件传递"><a href="#取消事件传递" class="headerlink" title="取消事件传递"></a>取消事件传递</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 中止事件传递，后续事件不在调用,注意，只能在传递事件的时候调用</span></div><div class="line"><span class="comment">// Called in the same thread (default)</span></div><div class="line">@<span class="function">Subscribe</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span>(<span class="params">MessageEvent <span class="keyword">event</span></span>)&#123;</div><div class="line">    <span class="comment">// Process the event</span></div><div class="line">    ...</div><div class="line">    <span class="comment">// Prevent delivery to other subscribers</span></div><div class="line">    EventBus.getDefault().cancelEventDelivery(<span class="keyword">event</span>) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="用户索引"><a href="#用户索引" class="headerlink" title="用户索引"></a>用户索引</h3><p>这个是3的一个新功能。它是可选的优化，可加速初始化用户注册。</p><p>要启用索引生成，需要用<code>annotationprocessor</code>属性将EventBus注释处理器添加到构建中。还设置一个参数<code>eventBusIndex</code>来指定生成的索引的完全限定类。例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="section">android</span> &#123;</div><div class="line"><span class="section">defaultConfig</span> &#123;</div><div class="line"><span class="section">javaCompileOptions</span> &#123;</div><div class="line"><span class="section">annotationProcessOptions</span> &#123;</div><div class="line"><span class="attribute">arguments</span> = [ eventBusIndex : <span class="string">'com.example.myapp.MyEventBusIndex'</span> ]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"><span class="attribute">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></div><div class="line">annotationProcessor <span class="string">'org.greenrobot:eventbus-annotation-processor:3.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以用 apt 的形式：</p><p>ps:由于apt的限制，匿名内部类中的annotation不会被识别，会自动降级在运行时反射，此时，效率会降低</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="section">buildscript</span> &#123;</div><div class="line">    <span class="section">dependencies</span> &#123;</div><div class="line">        <span class="attribute">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="attribute">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></div><div class="line">    apt <span class="string">'org.greenrobot:eventbus-annotation-processor:3.0.1'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">apt &#123;</div><div class="line">    <span class="section">arguments</span> &#123;</div><div class="line">        <span class="attribute">eventBusIndex</span> <span class="string">"com.example.myapp.MyEventBusIndex"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置EventBus传递它如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">EventBus</span> eventBus = <span class="type">EventBus</span>.builder().addIndex(<span class="function"><span class="keyword">new</span> <span class="title">MyEventBusIndex</span>()).<span class="title">build</span>();</span></div></pre></td></tr></table></figure><p>或者使用默认实例：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventBus.builder().addIndex(new MyEventBusIndex()).installDefaultEventBus();</div><div class="line">// Now the default<span class="built_in"> instance </span>uses the given index. Use it like this:</div><div class="line">EventBus eventBus = EventBus.getDefault();</div></pre></td></tr></table></figure><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-keepattributes *Annotation*</div><div class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> ** &#123;</span></div><div class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keep <span class="class"><span class="keyword">enum</span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">ThreadMode</span> &#123; *;</span> &#125;</div><div class="line"></div><div class="line"><span class="comment"># Only required if you use AsyncExecutor</span></div><div class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">util</span>.<span class="title">ThrowableFailureEvent</span> &#123;</span></div><div class="line">    &lt;init&gt;(java.lang.Throwable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每天进步一点，没准哪天自己也会成为大佬呢。&lt;/p&gt;
&lt;p&gt;现在，我开始研究最近特别火的消息传递机制&lt;code&gt;EventBus&lt;/code&gt;.以前，对于&lt;code&gt;activity&lt;/code&gt;和&lt;code&gt;fragment&lt;/code&gt;之间的通信可以用接口回调的方式实现，使用起来会略有些麻烦。现在可以用&lt;code&gt;EventBus&lt;/code&gt;，好用简单。&lt;/p&gt;
&lt;p&gt;官方说明是这样定义的：&lt;code&gt;EventBus&lt;/code&gt;是针对&lt;code&gt;Android&lt;/code&gt;的发布／订阅事件总线。轻松实现各个组件之间的传递消息，可读性高，耦合度低。下面以&lt;code&gt;3.0&lt;/code&gt;为例，学习和记录下其使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>几种开源协议的简要分析</title>
    <link href="http://blog.imemv.com/2017/04/21/choose-license/"/>
    <id>http://blog.imemv.com/2017/04/21/choose-license/</id>
    <published>2017-04-21T06:12:46.000Z</published>
    <updated>2017-10-11T06:14:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近闲来无事，在github上看到许多大佬项目中所用到的开源协议，一直对开源协议的使用比较模糊，在这里，对其做下简要说明。</p><h3 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h3><p>这里只介绍几个主要的开源协议–<code>GPL</code>、<code>BSD</code>、<code>MIT</code>、<code>Mozilla</code>、<code>Apache</code>、<code>LGPl</code>。<br><a id="more"></a><br>乌克兰程序员 Paul Bagwell画了一个分析图，说明该如何选择自己所需要的开源协议，我引用下 阮一峰大牛的图：</p><p><img src="http://image.beekka.com/blog/201105/bg2011050101.png" alt=""></p><p>还有来自其他大佬的表格图解</p><p><img src="http://static.oschina.net/uploads/img/201607/07112930_GNOM.png" alt=""></p><h4 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h4><p>BSD开源协议是一个给予使用者很大自由的协议。使用者可以修改源代码，也可以将修改后的源代码作为开源或者专用软件再发布。</p><p>但是当你使用BSD协议的代码，或者以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ul><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码的BSD协议。</li><li>如果再发布的只是二进制类库／软件。则需要再类库／软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者／机构名字和原来产品的名字做市场推广。</li></ul><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h4 id="Apache-Licence-2-0"><a href="#Apache-Licence-2-0" class="headerlink" title="Apache Licence 2.0"></a>Apache Licence 2.0</h4><p>Apache Lincence是著名的非盈利开源组织Apache采用的协议。和BSD类似，同样鼓励代码共享和尊重愿坐着的著作权，同样允许代码修改。需要满足的条件如下：</p><ul><li>需要给代码的用户一份Apache Licence</li><li>如果你修改代码，需要再被修改的文件中说明</li><li>在延伸的代码中需要带有原来代码中的协议，商标，专利声明和其他原来坐着规定需要包含的说明。</li><li>如果再发布的铲平中包含一个Notice文件，则在Notice文件中需要带有 Apache Licence。你可以再Notice中增加自己的许可，单不可以表现为对Apache Licence构成更改。</li></ul><h4 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h4><p>GPL协议和BSD，APache Licence等鼓励代码重用的许可不一样。它的出发点是代码的开源／免费使用和引用／修改／衍生代码的开源／免费使用。但不允许秀发后和衍生的代码作为闭源的商业软件发布和销售。这也是为什么我们能用免费的各种Linux（Linux 就是采用GPL协议），包括商业公司的linux和linux上各种各样的有个人，组织，以及商业软件公司开发的免费软件了。</p><p>GPL协议的主要内容是只要一个软件中使用GPL协议的产品，则该软件必须也采用GPL协议，必须也是开源和免费。这就是所谓的 “传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p><p>由于GPL的严格要求，商业软件或者对代码有保密要求的部门就不适合继承／采用作为类库和二次开发的基础。</p><p>在发布的时候需要伴随GPL协议等和BSD／Apache等类似。</p><h4 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h4><p>LGPL是GPL的一个为主要类库使用设计的开源协议。和GPL要求任何使用／修改／衍生之GPL类库的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用（link）方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业如那件作为类库引用病发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因 此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h4 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h4><p>MIT是和BSD一样宽范的许可协议，作者只想保留版权，而无任何其他了限制。也就是说，你必须在你的发行版里包含原许可协议的声明，无论你是以二进制发布的还是以源代码发布的。</p><h4 id="MPL（Mozilla-Public-License）"><a href="#MPL（Mozilla-Public-License）" class="headerlink" title="MPL（Mozilla Public License）"></a>MPL（Mozilla Public License）</h4><p>MPL既是得到自由软件基金会承认的自由软件许可证，也是得到开放源代码促进会承认的开源软件许可证。MPL允许在其授权下的源代码与其他授权的文件进行混合，包括私有许可证。但在MPL授权下的代码文件必须保持MPL授权，并且保持开源。</p><p>这样让MPL既不像MIT和BSD那样允许派生作品完全转化为私有，也不像GPL那样要求所有的派生作品，包括新的组件在内，全部必须保持GPL。通过允许在派生项目中存在私有模块，同时保证核心文件的开源，MPL同时激励了商业及开源社区来参与帮助开发核心软件。</p><p>使用MPL授权的软件并不受专利的限制，其可以自由使用，修改，并可自由的重新发布。带有专利代码的版本仍然可以使用，转让，甚至出售，但未经许可则不能修改代码。此外，MPL并不授予用户对于开发者商标的使用权。<br>为了满足MPL的条款限制，用户必须负担一些“责任”，主要是关于散发使用MPL授权的软件。用户必须确保重新散发的软件所有源代码均以MPL授权，即使是以可执行文件的方式提供或是与其他使用专有软件授权的源代码结合也一样。但若跟以GNU通用公共许可协议、GNU宽通用公共许可证、Affero通用公共许可证授权的源代码结合则是例外。此时开发者则可选用以上三种更加严格的条款来授权。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>几种协议各有利弊，一般大佬们喜欢用<code>Apache</code>和 <code>MIT</code>。（ps：大佬们果然懂的多，站在巨人的肩膀上才能看的更远）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近闲来无事，在github上看到许多大佬项目中所用到的开源协议，一直对开源协议的使用比较模糊，在这里，对其做下简要说明。&lt;/p&gt;
&lt;h3 id=&quot;开源协议&quot;&gt;&lt;a href=&quot;#开源协议&quot; class=&quot;headerlink&quot; title=&quot;开源协议&quot;&gt;&lt;/a&gt;开源协议&lt;/h3&gt;&lt;p&gt;这里只介绍几个主要的开源协议–&lt;code&gt;GPL&lt;/code&gt;、&lt;code&gt;BSD&lt;/code&gt;、&lt;code&gt;MIT&lt;/code&gt;、&lt;code&gt;Mozilla&lt;/code&gt;、&lt;code&gt;Apache&lt;/code&gt;、&lt;code&gt;LGPl&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://blog.imemv.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>浅析builder模式</title>
    <link href="http://blog.imemv.com/2017/04/20/android-builder/"/>
    <id>http://blog.imemv.com/2017/04/20/android-builder/</id>
    <published>2017-04-20T02:56:26.000Z</published>
    <updated>2017-10-11T06:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>其实，我很早就想总结一下自己多熟悉的设计模式，一直找不到合适的切入点来写。最近看到 <code>AlertDialog</code>,心想这不就是一个活生生的<code>Builder</code>模式的例子吗，于是乎，我赶紧敲了敲自己昏昏欲睡的脑袋，<br>抓住自己呼之欲出的灵感，奋笔疾书！<br><a id="more"></a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>建造者模式: 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>举个栗子：大学生去食堂打饭，可以选四菜一汤，菜系任意选，那么打饭的这个过程 和他出来的不同搭配 就需要进行分离。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AlertDialog.<span class="keyword">Builder </span><span class="keyword">builder=new</span></div><div class="line">                AlertDialog.<span class="keyword">Builder(this)</span></div><div class="line">                .setTitle(<span class="string">"My Dialog"</span>)</div><div class="line">                .setMessage(<span class="string">"This is Test Dialog"</span>)</div><div class="line">                .setIcon(R.drawable.icon)<span class="comment">;</span></div><div class="line">        AlertDialog <span class="keyword">dialog=builder.create();</span></div></pre></td></tr></table></figure><p>如上面的代码，我们不是通过 new 的方式来直接创建一个对象。而是通过其Builder 来配置，然后再<code>create</code>出来。</p><h3 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h3><p>下面我们通过看<code>AlertDialog</code> 的源码来解析下 <code>Builder</code> 模式，<br>先来看下它的构造方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AlertDialog</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>((Context)<span class="keyword">null</span>, <span class="keyword">false</span>, (OnCancelListener)<span class="keyword">null</span>);</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>可以看出来，方法的修饰是<code>protected</code> ,也就是说除了它的子类之外，其他类无法访问这个方法，所以这就不能直接创建<code>AlertDialog</code>的实例了，只能通过<code>Builder</code>的方式。</p><p>我们来看下<code>Builder</code>的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">        <span class="keyword">public</span> static <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AlertController.AlertParams P;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> Builder(<span class="meta">@NonNull</span> Context context) &#123;</div><div class="line">            <span class="keyword">this</span>(context, resolveDialogTheme(context, <span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">...</div><div class="line">        <span class="keyword">public</span> Builder setTitle(<span class="meta">@Nullable</span> CharSequence title) &#123;</div><div class="line">            P.mTitle = title;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> Builder setMessage(<span class="meta">@Nullable</span> CharSequence message) &#123;</div><div class="line">            P.mMessage = message;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> Builder setIcon(<span class="meta">@DrawableRes</span> int iconId) &#123;</div><div class="line">            P.mIconId = iconId;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    .....</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里只是其中的一部分，具体的可以去阅读下它的源码，在这里可以看出，<code>Builder</code>是<code>AlertDialog</code>的一个静态内部类，这里就列出了三个方法<br>用于分别设置其信息，标题和图标。这里的重点在于没个方法的返回值都是其自身。这样可以便利的设置自己的配置，也切法呦逻辑感。</p><p>来看下 <code>create</code>方法的实现：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public AlertDialog create() &#123;</div><div class="line">     <span class="comment">// Context has already been wrapped with the appropriate theme.</span></div><div class="line">     final AlertDialog <span class="built_in">dialog</span> = new AlertDialog(P.mContext, <span class="number">0</span>, <span class="literal">false</span>);</div><div class="line">     P.<span class="built_in">apply</span>(<span class="built_in">dialog</span>.mAlert);</div><div class="line">     <span class="built_in">dialog</span>.setCancelable(P.mCancelable);</div><div class="line">     <span class="keyword">if</span> (P.mCancelable) &#123;</div><div class="line">         <span class="built_in">dialog</span>.setCanceledOnTouchOutside(<span class="literal">true</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">dialog</span>.setOnCancelListener(P.mOnCancelListener);</div><div class="line">     <span class="built_in">dialog</span>.setOnDismissListener(P.mOnDismissListener);</div><div class="line">     <span class="keyword">if</span> (P.mOnKeyListener != null) &#123;</div><div class="line">         <span class="built_in">dialog</span>.setOnKeyListener(P.mOnKeyListener);</div><div class="line">     &#125;</div><div class="line">     return <span class="built_in">dialog</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>最后，通过我们之前的配置，关联到我们现在创建的这个实例上来。完成创建。</p><p>还有其他的地方也用到了了<code>Builder</code>模式，比如说 OkHttp里的<code>Request.Builder</code>.</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。</p></li><li><p>当构造过程必须允许被构造的对象有不同的表示时。</p></li><li><p>Builder模式要解决的也正是这样的问题：</p></li></ul><p>　　- 当我们要创建的对象很复杂的时候（通常是由很多其他的对象组合而成），</p><p>　　- 我们要复杂对象的创建过程和这个对象的表示（展示）分离开来，<br>这样做的好处就是通过一步步的进行复杂对象的构建，</p><p>　　- 由于在每一步的构造过程中可以引入参数，使得经过相同的步骤创建最后得到的对象的展示不一样。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里只是简单的从 Android的角度去分析<code>Builder</code>模式，简化了很多，<code>Builder</code>模式的使用并不会使我们的代码运行速度加快。设计模式总的来说就是对是封装、继承、多态和关联的反复使用；是一种编程技巧，让我们能写出高质量代码的技巧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;其实，我很早就想总结一下自己多熟悉的设计模式，一直找不到合适的切入点来写。最近看到 &lt;code&gt;AlertDialog&lt;/code&gt;,心想这不就是一个活生生的&lt;code&gt;Builder&lt;/code&gt;模式的例子吗，于是乎，我赶紧敲了敲自己昏昏欲睡的脑袋，&lt;br&gt;抓住自己呼之欲出的灵感，奋笔疾书！&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Materal Design 之 CardView</title>
    <link href="http://blog.imemv.com/2017/04/14/cardview-first/"/>
    <id>http://blog.imemv.com/2017/04/14/cardview-first/</id>
    <published>2017-04-14T03:41:55.000Z</published>
    <updated>2017-10-11T06:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看一些大佬的自定义view，其中用到了<code>CardView</code>，感觉好高大上，赶紧去恶补一下。（我默默的打开了源码）</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>首先在刚开始有这么一句话<br><code>A FrameLayout with a rounded corner background and shadow.</code></p><p><code>CardView</code>是一个带圆角、带阴影效果的<code>FrameLayout</code>（原来如此）<br><a id="more"></a><br>接下来第二句</p><p><code>CardView uses &lt;code&gt;elevation&lt;/code&gt; property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms.</code></p><p>它是使用的 <code>elevation</code>这个属性来控制阴影效果的大小，成正比的。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">app:</span>cardElevation=<span class="string">"2dp"</span></div></pre></td></tr></table></figure><p><code>Due to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See {@link #setPreventCornerOverlap(boolean)} to change this behavior).</code></p><p> 在5.0版本之前圆角的裁剪是比较麻烦的，所以 CardView不会裁剪那些和圆角相关的子空间。但是用一种方法避免了这样的交集，那就是 padding（可以去看setPreventCornerOverlap(boolean) 来改变这些行为）</p><p><code>Before Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to &lt;code&gt;maxCardElevation + (1 - cos45) * cornerRadius&lt;/code&gt; on thesides and &lt;code&gt;maxCardElevation * 1.5 + (1 - cos45) * cornerRadius&lt;/code&gt; on top and bottom.</code></p><p> 在5.0之前，<code>CardView</code>为其显示的内容以及阴影效果增加了padding。在<code>sides</code>处padding值等于<code>maxCardElevation + (1 - cos45) * cornerRadius</code>, 在<code>top</code>和<code>bottom</code>处等于<code>maxCardElevation * 1.5 + (1 - cos45) * cornerRadius</code></p><p><code>Since padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or {@link #setContentPadding(int, int, int, int)} in code to set the padding between the edges of the CardView and children of CardView.</code></p><p>padding是用来抵消阴影的，你不能在<code>CardView</code>上设置<code>padding</code>。你可以用 content padding属性或者在代码中通过<code>setContentPadding(int, int, int, int)</code>来设置Card和CardView的子控件之间的padding；</p><p><code>Note that, if you specify exact dimensions for the CardView, because of the shadows, its contentarea will be different between platforms before Lollipop and after Lollipop. By using api versionspecific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can call {@link #setUseCompatPadding(boolean)} and pass &lt;code&gt;true&lt;/code&gt;.</code></p><p> 如果你给<code>CardView</code>设置了精确的尺寸，由于阴影效果，在Android L之前和Android L之后的版本中，<code>CardView</code>中显示的<code>content</code>是有区别的。通过使用API版本的特定值，可以避免这些改变。如果你想更好的设置<code>CardView</code>的内边距在Android L和之后的版本，你可以设置<code>setUseCompatPadding(boolean)为true</code></p><p> <code>To change CardView&#39;s elevation in a backward compatible way, use {@link #setCardElevation(float)}. CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by {@link #getMaxCardElevation()}. If you want to change elevationdynamically, you should call {@link #setMaxCardElevation(float)} when CardView is initialized.</code></p><p>修改<code>CardView</code>的<code>elevation</code>属性通过使用<code>setCardElevation(float)</code>。<code>CardView</code>将使用<code>elevation</code>在Android L和之前的版本，它将修改这个阴影的size。为了避免当shadow size改变的时候View的移动，shadow size不能大于<code>getMaxCardElevation()</code>。如果你想动态的修改elevation，你可以调用<code>setMaxCardElevation(float)</code>方法当CardView别初始化的时候。</p><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">app:cardBackgroundColor=<span class="string">"#ffffff"</span>  </div><div class="line">cardView.setCardBackgroundColor(<span class="keyword">int</span>);<span class="comment">//设置CardView的background的颜色  </span></div><div class="line"></div><div class="line">app:cardCornerRadius=<span class="string">"5dp"</span>  </div><div class="line">cardView.setRadius(<span class="keyword">float</span>);<span class="comment">//设置CardView的圆角半径  </span></div><div class="line"></div><div class="line">app:cardElevation=<span class="string">"2sp"</span>  </div><div class="line">cardView.setMaxCardElevation(<span class="keyword">float</span>)//设置CardView的elevation（阴影，值越大，阴影效果越强）  </div><div class="line"></div><div class="line">app:cardMaxElevation=<span class="string">"2sp"</span>//设置CardView的最大Elevation  </div><div class="line"></div><div class="line">app:cardPreventCornerOverlap=<span class="string">"true|false"</span>  </div><div class="line">cardView.setPreventCornerOverlap(<span class="keyword">boolean</span>);<span class="comment">//在Android5.0以前的版本上防止子控件和CardView的圆角之间的重叠交接  </span></div><div class="line"></div><div class="line">app:cardUseCompatPadding=<span class="string">"true|false"</span>  </div><div class="line">cardView.setUseCompatPaddin(<span class="keyword">boolean</span>);<span class="comment">//在Android5.0和以上版本添加padding让其和之前的版本有相同的测量形式  </span></div><div class="line"></div><div class="line">app:contentPadding=<span class="string">""</span>  </div><div class="line">cardView.setContentPadding(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//设置Card边缘和CardView的子控件之间的内边距  </span></div><div class="line"></div><div class="line">app:contentPaddingTop=<span class="string">""</span>  </div><div class="line">app:contentPaddingBottom=<span class="string">""</span>  </div><div class="line">app:contentPaddingLeft=<span class="string">""</span>  </div><div class="line">app:contentPaddingRight=<span class="string">""</span></div></pre></td></tr></table></figure><p>至于具体的代码我这里就不贴了，很简单的，可以自己去试试（实践出真知）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看一些大佬的自定义view，其中用到了&lt;code&gt;CardView&lt;/code&gt;，感觉好高大上，赶紧去恶补一下。（我默默的打开了源码）&lt;/p&gt;
&lt;h3 id=&quot;源码解读&quot;&gt;&lt;a href=&quot;#源码解读&quot; class=&quot;headerlink&quot; title=&quot;源码解读&quot;&gt;&lt;/a&gt;源码解读&lt;/h3&gt;&lt;p&gt;首先在刚开始有这么一句话&lt;br&gt;&lt;code&gt;A FrameLayout with a rounded corner background and shadow.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CardView&lt;/code&gt;是一个带圆角、带阴影效果的&lt;code&gt;FrameLayout&lt;/code&gt;（原来如此）&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>算法——初篇</title>
    <link href="http://blog.imemv.com/2017/03/20/algorithm/"/>
    <id>http://blog.imemv.com/2017/03/20/algorithm/</id>
    <published>2017-03-20T02:13:11.000Z</published>
    <updated>2017-10-11T06:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个经常在算法课上逃课的孩子，写这个有些尴尬，因为算法真的是太枯燥了，但是作为一个程序员，算法还是一定要会的（ps：许多大公司面试的时候特爱考）。在这里，简单说下几个基本的算法。</p><p>在这之前，说下时间复杂度的概念。<br><a id="more"></a></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h3><p>时间频度：一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才知道。但是我们没有必要那么精准的数据，只需要知道哪个算法所话费的时间比较多，哪个比较少就够了。算法的所花费的时间是和它执行的次数成正比的，这样我们只需要关系次数就好了。一个算法中的语句执行次数被称为语句频度或时间频度。记为<code>T(n)</code></p><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>在刚才提到的时间频度中，n称为问题的规模，当n不断变化时没时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入了时间复杂度的概念。一般情况下，算法中基本操作重复执行的次数时问题规模n的某个函数，用T(n)表示，若有某个辅助函数<code>f(n)</code>，使得当<code>n</code>近于无限大时，<code>T(n)f(n)</code>的极限为不等于零的常数，则称为<code>f(n)是T(n)的同数量级函数</code>。记作<code>T(n)=O(f(n))</code>,称<code>O(f(n))</code>为算法的渐进时间复杂度，简称时间复杂度。</p><p>   时间频度不同，但时间复杂度可能相同。如：T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。</p><p>按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)，立方阶O(n3),…， k次方阶O(nk),指数阶O(2n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p><p>前把时间复杂度的概念说了，是为了为下面的数据结构作铺垫。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><ul><li>链表就是有节点<code>(Node)</code>组成的线性集合。每个指针都可以利用指针指向其他节点，它是一种包含多个节点，能够用于表示序列的数据结构。</li><li><strong>单向链表：</strong>链表中每个节点仅指向下个节点，并且最后一个节点指向null</li><li><strong>双向链表：</strong>链表中每个节点有两个指针x、y，x指向下个节点，y指向上个节点。最后一个节点y指向null</li><li>时间复杂度<ul><li>索引<code>O(n)</code></li><li>搜索<code>O(n)</code></li><li>插入<code>O(1)</code></li><li>移除<code>O(1)</code></li></ul></li></ul><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><ul><li>栈是元素的集合，包括压栈<code>push</code>、移栈<code>pop</code>两个基本操作。</li><li>遵循后入先出的原则（LIFO）</li><li>时间复杂度<ul><li>索引<code>O(n)</code></li><li>搜索<code>O(n)</code></li><li>插入<code>O(1)</code></li><li>移除<code>O(1)</code></li></ul></li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>队列也是元素的集合，包括两个基本操作：<code>enqueue</code>将元素插入队列，<code>dequeue</code>将元素从队列中移除。</li><li>遵循先入先出的原则（FIFO），这里呢，可以这样理解 栈就像一个瓶子，队列呢 就像一根管子。</li><li>时间复杂度<ul><li>索引<code>O(n)</code></li><li>搜索<code>O(n)</code></li><li>插入<code>O(1)</code></li><li>移除<code>O(1)</code></li></ul></li></ul><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><ul><li>树势无向，连同的无限图</li></ul><h3 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h3><ul><li>二叉树是每个节点最多包含左子节点和右子节点的树形数据结构</li><li><strong>满二叉树：</strong>树中每个节点最多包含0个或2个节点</li><li><strong>完全二叉树：</strong>除最后一层外，每一层上的结点数均达到最大值；在最后一层上只缺少右边的若干结点。</li></ul><h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><ul><li>二叉搜索树（BST）是一种特殊的二叉树，其任何节点中的值都会大于或者等于其左子树中存储的值并且小于或者等于其右子树中存储的值。</li><li>时间复杂度:<ul><li>索引: <code>O(log(n))</code></li><li>搜索: <code>O(log(n))</code></li><li>插入: <code>O(log(n))</code></li><li>删除: <code>O(log(n))</code></li></ul></li></ul><p><img src="http://www.bysocket.com/wp-content/uploads/2016/07/3.png" alt=""></p><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>字典树它有3个基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同</li></ul><p>即如果现在有b，abc，abd，bcd，abcd，efg，hii 这6个单词，我们可以构建一棵如下图所示的树：</p><p><img src="https://github.com/julycoding/The-Art-Of-Programming-By-July/raw/master/ebook/images/8/8.4/1.jpg" alt=""></p><p>未完待续。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个经常在算法课上逃课的孩子，写这个有些尴尬，因为算法真的是太枯燥了，但是作为一个程序员，算法还是一定要会的（ps：许多大公司面试的时候特爱考）。在这里，简单说下几个基本的算法。&lt;/p&gt;
&lt;p&gt;在这之前，说下时间复杂度的概念。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.imemv.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>初识rxjava（二）</title>
    <link href="http://blog.imemv.com/2017/03/16/rxjava-retrofit/"/>
    <id>http://blog.imemv.com/2017/03/16/rxjava-retrofit/</id>
    <published>2017-03-16T09:29:49.000Z</published>
    <updated>2017-10-11T06:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇，简单的认识了最近火爆异常的RxJava,如果你对RxJava还是很陌生，你可以去网上找一下相关知识，当然也可以看我的上一篇文章<a href="https://lennyup.github.io/2017/03/14/rxjava-first/" target="_blank" rel="external">初识RxJava</a>。这里我通过RxJava的使用场景之一——与Retrofit相结合，来具体看下RxJava的使用。</p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>RxJava和Retrofit结合使用的最基本的格式：<br><a id="more"></a><br>用<code>subscribeOn</code> 和<code>observeOn</code>来控制线程，并通过<code>subscribe()</code>来触发网络请求的开始。代码的大致形式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">api</span><span class="selector-class">.getData</span>()</div><div class="line">   <span class="selector-class">.subscribeOn</span>(<span class="selector-tag">Schedulers</span><span class="selector-class">.io</span>())</div><div class="line">   <span class="selector-class">.observeOn</span>(<span class="selector-tag">AndroidSchedulers</span><span class="selector-class">.mainThread</span>())</div><div class="line">   <span class="selector-class">.subscribe</span>(<span class="selector-tag">observer</span>);</div></pre></td></tr></table></figure><p>具体的来看下我写的例子（ps： 一些布局什么的我就不往上贴了）</p><p>首先看我写的model，很简单，就一个描述和一个图片的地址</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Images</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> description;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> image_url;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来就是netWork。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetWork</span> </span>&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> ElementaryApi elementaryApi;</div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Converter.Factory gosnFactory = GsonConverterFactory.create();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CallAdapter.Factory rxFactory = RxJavaCallAdapterFactory.create();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ElementaryApi getElementaryApi() &#123;</div><div class="line">        <span class="keyword">if</span> (elementaryApi == <span class="keyword">null</span>) &#123;</div><div class="line">            Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                    .<span class="keyword">client</span>(okHttpClient)</div><div class="line">                    .baseUrl(<span class="string">"http://www.zhuangbi.info/"</span>)</div><div class="line">                    .addConverterFactory(gosnFactory)</div><div class="line">                    .addCallAdapterFactory(rxFactory)</div><div class="line">                    .build();</div><div class="line">            elementaryApi = retrofit.create(ElementaryApi.class);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elementaryApi;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>这是<code>Retrofit</code>部分的代码，这里我用到的依赖包有这几个：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.2.7'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.2.1'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.2.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.2.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.2.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:okhttp:3.6.0'</span></div></pre></td></tr></table></figure><p>关于<code>Retrofit</code>的相关用法，这里就不介绍了，有需要的可以自己去google下（ps: 在以后我会抽空写下关于<code>Retrofit2</code>的用法的），<br>可以看到这里有一个<code>ElementaryApi</code>,这就是<code>Retrofit</code>和<code>RxJava</code> 结合关键的地方了。其代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">ElementaryApi</span> &#123;</div><div class="line">    <span class="variable">@GET</span>(<span class="string">"search"</span>)</div><div class="line">    Observable&lt;List&lt;Images&gt;&gt; search(<span class="variable">@Query</span>(<span class="string">"q"</span>) String query);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Retrofit 除了提供了传统的 <code>Callback</code> 形式的 API，还有 RxJava 版本的 <code>Observable</code> 形式 API。代码如上，在程序的构建过程中， Retrofit 会把自动把方法实现并生成代码，然后开发者就可以利用下面的方法来获取特定用户并处理响应。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">     ...    </div><div class="line">     &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">failure</span><span class="params">(RetrofitError <span class="keyword">error</span>)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>因为返回的是<code>Observable</code>，所以其处理方式如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observer&lt;List&lt;Images&gt;&gt; observer = <span class="keyword">new</span> Observer&lt;List&lt;Images&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        mLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">        Toast.makeText(getActivity(), <span class="string">"失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Images&gt; images)</span> </span>&#123;</div><div class="line">        mLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">        adapter.setImages(images);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">...</div><div class="line"><span class="keyword">private</span>  <span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">Subscription mSubscription = NetWork.getElementaryApi()</div><div class="line">            .search(key)</div><div class="line">            .subscribeOn(Schedulers.io())</div><div class="line">            .observeOn(AndroidSchedulers.mainThread())</div><div class="line">            .subscribe(observer);</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><p>到这里，是不是很熟悉了，<code>RxJava</code>的用法。附上我测试的效果。</p><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/rxjava-retrofit1.png" alt=""></p><h2 id="转换（map）"><a href="#转换（map）" class="headerlink" title="转换（map）"></a>转换（map）</h2><p>有些接口的设计，会在我们需要的数据外包一层，添加点额外的信息，这些信息本地显示是用不到的，这个时候，我们就要用到<code>map()</code>把我们需要的信息剥离出来。代码的大致形式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">api</span><span class="selector-class">.getData</span>()</div><div class="line">   <span class="selector-class">.map</span>(<span class="selector-tag">response</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">response</span><span class="selector-class">.data</span>)</div><div class="line">   <span class="selector-class">.subscribeOn</span>(<span class="selector-tag">Schedulers</span><span class="selector-class">.io</span>())</div><div class="line">   <span class="selector-class">.observeOn</span>(<span class="selector-tag">AndroidSchedulers</span><span class="selector-class">.mainThread</span>())</div><div class="line">   <span class="selector-class">.subscribe</span>(<span class="selector-tag">observer</span>);</div></pre></td></tr></table></figure><p>我这里所做的例子是把网络上请求回来的时间格式转换成 <code>yy/MM/dd HH:mm:ss</code>的形式。<br>先看一下model</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GankBeauty</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> createdAt;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> url;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一个是<code>url</code>是显示图片所需要的地址，<code>createAt</code>就是我转换要用到的时间。由于我获取的是一个list，所以我们要把这个再包一下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GankBeautyResult</span> </span>&#123;</div><div class="line">    <span class="comment">//public boolean error;</span></div><div class="line">    <span class="keyword">public</span> <span class="meta">@SerializedName(<span class="meta-string">"results"</span>)</span></div><div class="line">    List&lt;GankBeauty&gt; beauties;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来就要写我们要<code>retrofit</code>返回给我们的<code>Observable</code>了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">MapApi</span> &#123;</div><div class="line">    <span class="variable">@GET</span>(<span class="string">"data/福利/&#123;number&#125;/&#123;page&#125;"</span>)</div><div class="line">    Observable&lt;GankBeautyResult&gt; getBeauties(<span class="variable">@Path</span>(<span class="string">"number"</span>) int number, <span class="variable">@Path</span>(<span class="string">"page"</span>) int page);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>网络请求代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> MapApi mapApi;</div><div class="line">...</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MapApi <span class="title">getMapApi</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mapApi ==null) &#123;</div><div class="line">           Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                   .client(okHttpClient)</div><div class="line">                   .baseUrl(<span class="string">"http://gank.io/api/"</span>)</div><div class="line">                   .addConverterFactory(gosnFactory)</div><div class="line">                   .addCallAdapterFactory(rxFactory)</div><div class="line">                   .build();</div><div class="line">           mapApi = retrofit.create(MapApi.<span class="keyword">class</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> mapApi;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><code>RxJava</code>创建订阅：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mSubscription = NetWork.getMapApi()</div><div class="line"><span class="meta">               .getBeauties</span>(<span class="number">10</span>, page)</div><div class="line"><span class="meta">               .map</span>(GankBeautyResultToItemsMapper.getInstance())</div><div class="line"><span class="meta">               .subscribeOn</span>(Schedulers.io())</div><div class="line"><span class="meta">               .observeOn</span>(AndroidSchedulers.mainThread())</div><div class="line"><span class="meta">               .subscribe</span>(observer)<span class="comment">;</span></div></pre></td></tr></table></figure><p>我把<code>map()</code>里的方法<code>Fun1</code>抽成了一个单独的类，来看下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GankBeautyResultToItemsMapper</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Func1</span></span>&lt;<span class="title">GankBeautyResult</span>, <span class="title">List</span>&lt;<span class="title">MapItem</span>&gt;&gt;</span>&#123;</div><div class="line"></div><div class="line">...</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> List&lt;MapItem&gt; call(GankBeautyResult gankBeautyResult) &#123;</div><div class="line">        List&lt;GankBeauty&gt; gankBeauties = gankBeautyResult.beauties;</div><div class="line">        List&lt;MapItem&gt; items = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;(gankBeauties.size());</div><div class="line">        SimpleDateFormat inputFormat = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd'T'HH:mm:ss.SS'Z'"</span>);</div><div class="line">        SimpleDateFormat outputFormat = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yy/MM/dd HH:mm:ss"</span>);</div><div class="line">        <span class="keyword">for</span> (GankBeauty gankBeauty : <span class="type">gankBeauties</span>) &#123;</div><div class="line">            MapItem item = <span class="keyword">new</span> <span class="type">MapItem</span>();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Date date = inputFormat.parse(gankBeauty.createdAt);</div><div class="line">                item.description = outputFormat.format(date);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                item.description = <span class="string">"unknown date"</span>;</div><div class="line">            &#125;</div><div class="line">            item.imageUrl = gankBeauty.url;</div><div class="line">            items.add(item);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> items;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/rxjava-retrofit2.png" alt=""></p><p>当然，<code>map</code>也可以用于其他需求的格式转换。</p><h2 id="压合（zip）"><a href="#压合（zip）" class="headerlink" title="压合（zip）"></a>压合（zip）</h2><p>有的时候，需要同时访问不同的接口，然后将结果做下处理，返回统一的格式。比如我们经常会看到一个list列表里就有广告，这种并行的异步请求比较麻烦，但是用<code>zip</code>之后就会简单好多。代码大致形式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span><span class="selector-class">.zip</span>(<span class="selector-tag">api</span><span class="selector-class">.getData</span>(), <span class="selector-tag">adApi</span><span class="selector-class">.getAds</span>(), <span class="selector-tag">zipFunc</span>())</div><div class="line">  <span class="selector-class">.subscribeOn</span>(<span class="selector-tag">Schedulers</span><span class="selector-class">.io</span>())</div><div class="line">  <span class="selector-class">.observeOn</span>(<span class="selector-tag">AndroidSchedulers</span><span class="selector-class">.mainThread</span>())</div><div class="line">  <span class="selector-class">.subscribe</span>(<span class="selector-tag">observer</span>)；</div></pre></td></tr></table></figure><p>我们来直接看详细的代码：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">mSubscription = Observable.zip(NetWork.getMapApi().getBeauties(<span class="number">100</span>, <span class="number">1</span>).<span class="built_in">map</span>(GankBeautyResultToItemsMapper.getInstance()),</div><div class="line">                NetWork.getElementaryApi().search(<span class="string">"可爱"</span>),</div><div class="line">                <span class="keyword">new</span> Func2&lt;List&lt;MapItem&gt;, List&lt;Images&gt;, List&lt;MapItem&gt;&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> List&lt;MapItem&gt; call(List&lt;MapItem&gt; mapItems, List&lt;Images&gt; images) &#123;</div><div class="line">                        List&lt;MapItem&gt; items = <span class="keyword">new</span> ArrayList&lt;MapItem&gt;();</div><div class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i =<span class="number">0</span>;i &lt; mapItems.<span class="built_in">size</span>() /<span class="number">2</span> &amp;&amp; i &lt; images.<span class="built_in">size</span>(); i ++) &#123;</div><div class="line">                            items.<span class="built_in">add</span>(mapItems.<span class="built_in">get</span>(i * <span class="number">2</span>));</div><div class="line">                            items.<span class="built_in">add</span>(mapItems.<span class="built_in">get</span>(i * <span class="number">2</span> + <span class="number">1</span>));</div><div class="line">                            MapItem item = <span class="keyword">new</span> MapItem();</div><div class="line">                            Images <span class="built_in">image</span> = images.<span class="built_in">get</span>(i);</div><div class="line">                            item.description = <span class="built_in">image</span>.description;</div><div class="line">                            item.imageUrl = <span class="built_in">image</span>.image_url;</div><div class="line">                            items.<span class="built_in">add</span>(item);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> items;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(observer);</div><div class="line">                ...</div></pre></td></tr></table></figure><p>这段代码很容易理解，我就不过多解释了。</p><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>处于安全性，性能等多方面的考虑，大多数服务器会有一些接口需要传入token才能正确的返回数据，但是请求token的是另一个接口，所以需要两步连续的请求才能请求到数据。使用<code>flatMap</code>可以用较清晰的代码实现连续请求，避免callback嵌套的结构，代码大致如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">api</span><span class="selector-class">.getToken</span>()</div><div class="line">   <span class="selector-class">.flatMap</span>(<span class="selector-tag">token</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">api</span><span class="selector-class">.getData</span>(<span class="selector-tag">token</span>))</div><div class="line">   <span class="selector-class">.subscribeOn</span>(<span class="selector-tag">Schedukers</span><span class="selector-class">.io</span>())</div><div class="line">   <span class="selector-class">.observeOn</span>(<span class="selector-tag">AndroidSchedulers</span><span class="selector-class">.mainThread</span>())</div><div class="line">   <span class="selector-class">.subscribe</span>(<span class="selector-tag">observer</span>);</div></pre></td></tr></table></figure><p>这里我是伪造的token，所以需要个model。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeToken</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String token;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> expired;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FakeToken</span><span class="params">(<span class="keyword">boolean</span> expired)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.expired = expired;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FakeToken</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还需要一个有<code>id</code>和<code>name</code>的model</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> FakeThing &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把传入的string字符串，返回一个faketoken对象，在由一个<code>faketoken</code>对象返回我们需要的id和name，完成连续两步请求。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> FakeApi &#123;</div><div class="line">    Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> createToken() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"fake_token_"</span> + System.currentTimeMillis() % <span class="number">10000</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> Observable&lt;FakeToken&gt; getFakeToken(@NonNull final <span class="keyword">String</span> fakeAuth) &#123;</div><div class="line">        <span class="built_in">return</span> Observable.just(fakeAuth)</div><div class="line">                .<span class="built_in">map</span>(<span class="keyword">new</span> Func1&lt;<span class="keyword">String</span>, FakeToken&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> FakeToken call(<span class="keyword">String</span> s) &#123;</div><div class="line">                        <span class="keyword">int</span> fakeNetworkTime = <span class="built_in">random</span>.nextInt(<span class="number">500</span>) + <span class="number">500</span>;</div><div class="line">                        <span class="built_in">try</span> &#123;</div><div class="line">                            Thread.sleep(fakeNetworkTime);</div><div class="line">                        &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        FakeToken fakeToken = <span class="keyword">new</span> FakeToken();</div><div class="line">                        fakeToken.token = createToken();</div><div class="line">                        <span class="built_in">return</span> fakeToken;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Observable&lt;FakeThing&gt; getFakeData(FakeToken fakeToken) &#123;</div><div class="line">        <span class="built_in">return</span> Observable.just(fakeToken)</div><div class="line">                .<span class="built_in">map</span>(<span class="keyword">new</span> Func1&lt;FakeToken, FakeThing&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> FakeThing call(FakeToken fakeToken) &#123;</div><div class="line">                        <span class="comment">// Add some random delay to mock the network delay</span></div><div class="line">                        <span class="keyword">int</span> fakeNetworkTimeCost = <span class="built_in">random</span>.nextInt(<span class="number">500</span>) + <span class="number">500</span>;</div><div class="line">                        <span class="built_in">try</span> &#123;</div><div class="line">                            Thread.sleep(fakeNetworkTimeCost);</div><div class="line">                        &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="built_in">if</span> (fakeToken.expired) &#123;</div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Token expired!"</span>);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        FakeThing fakeData = <span class="keyword">new</span> FakeThing();</div><div class="line">                        fakeData.id = (<span class="keyword">int</span>) (System.currentTimeMillis() % <span class="number">1000</span>);</div><div class="line">                        fakeData.name = <span class="string">"FAKE_USER_"</span> + fakeData.id;</div><div class="line">                        <span class="built_in">return</span> fakeData;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建订阅</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mSubscription = fakeApi.getFakeToken(<span class="string">"fake_auth_code"</span>)</div><div class="line">                .flatMap(<span class="keyword">new</span> Func1&lt;FakeToken, Observable&lt;FakeThing&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> Observable&lt;FakeThing&gt; call(FakeToken fakeToken) &#123;</div><div class="line"></div><div class="line">                        <span class="function"><span class="keyword">return</span> fakeApi.<span class="title">getFakeData</span><span class="params">(fakeToken)</span></span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;FakeThing&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(FakeThing fakeThing)</span> </span>&#123;</div><div class="line">                        ...</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                        ...</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure><h2 id="高级token"><a href="#高级token" class="headerlink" title="高级token"></a>高级token</h2><p>很多情况下，token是一整不变的，知道它超时或者被销毁（多数token都是这样的）。这样的token，需要把它保存起来，并且在发现它失效的时候要能够自动重新获取新的token并继续访问之前由于token失效而失败的请求。这种情况，以前需要很多复杂的代码，要是用RxJava，可以用<code>retryWhen()</code>来轻松来处理这种情况。大致代码形式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">api</span><span class="selector-class">.getData</span>(<span class="selector-tag">token</span>)</div><div class="line">   <span class="selector-class">.retryWhen</span>(<span class="selector-tag">observable</span> <span class="selector-tag">-</span>&gt;</div><div class="line">    <span class="selector-tag">observable</span><span class="selector-class">.flatMap</span>( <span class="selector-tag">-</span>&gt;</div><div class="line">    <span class="selector-tag">api</span><span class="selector-class">.getToken</span>()</div><div class="line">    <span class="selector-class">.doOnNext</span>(<span class="selector-tag">-</span>&gt;<span class="selector-tag">updateToken</span>())))</div><div class="line">   <span class="selector-class">.subscribeOn</span>(<span class="selector-tag">Schedulers</span><span class="selector-class">.io</span>())</div><div class="line">   <span class="selector-class">.observeOn</span>(<span class="selector-tag">AndroidSchedlers</span><span class="selector-class">.mainThread</span>())</div><div class="line">   <span class="selector-class">.subscribe</span>(<span class="selector-tag">observer</span>)</div></pre></td></tr></table></figure><p>详细代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> FakeToken cachedFakeToken = <span class="keyword">new</span> FakeToken(<span class="keyword">true</span>);</div><div class="line">      mSubscription = Observable.just(<span class="keyword">null</span>)</div><div class="line">                .flatMap(<span class="keyword">new</span> Func1&lt;Object, Observable&lt;FakeThing&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> Observable&lt;FakeThing&gt; call(Object o) &#123;</div><div class="line">                        <span class="keyword">return</span> cachedFakeToken.token == <span class="keyword">null</span></div><div class="line">                                ? Observable.&lt;FakeThing&gt;<span class="keyword">error</span>(<span class="keyword">new</span> NullPointerException(<span class="string">"Token is null!"</span>))</div><div class="line">                                : fakeApi.getFakeData(cachedFakeToken);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .retryWhen(<span class="keyword">new</span> Func1&lt;Observable&lt;? <span class="keyword">extends</span> Throwable&gt;, Observable&lt;?&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> Observable&lt;?&gt; call(Observable&lt;? <span class="keyword">extends</span> Throwable&gt; observable) &#123;</div><div class="line">                        <span class="function"><span class="keyword">return</span> observable.<span class="title">flatMap</span><span class="params">(<span class="keyword">new</span> Func1&lt;Throwable, Observable&lt;?&gt;&gt;()</span> </span>&#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="keyword">public</span> Observable&lt;?&gt; call(Throwable throwable) &#123;</div><div class="line">                                <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> IllegalArgumentException || throwable <span class="keyword">instanceof</span> NullPointerException) &#123;</div><div class="line">                                    <span class="keyword">return</span> fakeApi.getFakeToken(<span class="string">"fake_auth_code"</span>)</div><div class="line">                                            .doOnNext(<span class="keyword">new</span> Action1&lt;FakeToken&gt;() &#123;</div><div class="line">                                                <span class="meta">@Override</span></div><div class="line">                                                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(FakeToken fakeToken)</span> </span>&#123;</div><div class="line">                                                    tokenUpdated = <span class="keyword">true</span>;</div><div class="line">                                                    cachedFakeToken.token = fakeToken.token;</div><div class="line">                                                    cachedFakeToken.expired = fakeToken.expired;</div><div class="line">                                                &#125;</div><div class="line">                                            &#125;);</div><div class="line">                                &#125;</div><div class="line">                                <span class="function"><span class="keyword">return</span> Observable.<span class="title">error</span><span class="params">(throwable)</span></span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;FakeThing&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(FakeThing fakeData)</span> </span>&#123;</div><div class="line">                        swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                        String token = cachedFakeToken.token;</div><div class="line">                        <span class="keyword">if</span> (tokenUpdated) &#123;</div><div class="line">                            token += <span class="string">"("</span> + getString(R.string.updated) + <span class="string">")"</span>;</div><div class="line">                        &#125;</div><div class="line">                        tokenTv.setText(getString(R.string.got_token_and_data, token, fakeData.id, fakeData.name));</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                        swipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                        Toast.makeText(getActivity(), <span class="string">"失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>RxJava中有一个类叫做<code>SubJect</code>,它既是<code>Obserevable</code>又是<code>Observer</code>,可以用做中间件来传递数据。例如，用它的子类<code>BehaviorSubject</code>来缓存数据。大致代码如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">api.getData<span class="comment">()</span></div><div class="line">   .subscribe<span class="comment">(behavioSubject)</span>;<span class="comment">//缓存数据</span></div><div class="line">   behaviorSubject.subscribe<span class="comment">(observer)</span> <span class="comment">//把缓存数据发送给observer</span></div></pre></td></tr></table></figure><p>如有任何问题请联系我微博<a href="http://weibo.com/3652601464/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1" target="_blank" rel="external">空白_Lester</a></p><p>本文地址 <a href="https://lennyup.github.io/2017/03/16/rxjava-retrofit/" target="_blank" rel="external">https://lennyup.github.io/2017/03/16/rxjava-retrofit</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇，简单的认识了最近火爆异常的RxJava,如果你对RxJava还是很陌生，你可以去网上找一下相关知识，当然也可以看我的上一篇文章&lt;a href=&quot;https://lennyup.github.io/2017/03/14/rxjava-first/&quot;&gt;初识RxJava&lt;/a&gt;。这里我通过RxJava的使用场景之一——与Retrofit相结合，来具体看下RxJava的使用。&lt;/p&gt;
&lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h2&gt;&lt;p&gt;RxJava和Retrofit结合使用的最基本的格式：&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>初识RxJava</title>
    <link href="http://blog.imemv.com/2017/03/14/rxjava-first/"/>
    <id>http://blog.imemv.com/2017/03/14/rxjava-first/</id>
    <published>2017-03-14T07:23:15.000Z</published>
    <updated>2017-10-11T06:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>自打进入公司以来，一直用的是React Native，以及 React + WebView的结构来写代码，对原生的一些知识学习落后了许多。老是听朋友说什么 RxJava，一脸懵逼。现在，趁闲暇之时，补充下Android知识，在这里简单说下对RxJava的理解。</p><p>在开始之前呢，先要说下其github以及要依赖的包，由于现在 RxJava2已经有了一段时间了，但是对于小白的我来说，还是先从1开始吧。</p><p>GitHub:</p><p><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a><br><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a><br><a id="more"></a><br>引入的依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.2.7'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.2.1'</span></div></pre></td></tr></table></figure><h2 id="RxJava是什么"><a href="#RxJava是什么" class="headerlink" title="RxJava是什么"></a>RxJava是什么</h2><p>相信所有初学者应该和我一样，对于这个很陌生，我们看下github上对其介绍：<code>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</code><br>(大概意思是说 这是一个在VM上使用可观察的序列来组成异步、基于事件的库)</p><p>这里我们就可以总结的说 RxJava是一个实现异步操作的类。异步实现 ？那我们之前也写过很多呀 像 AsyncTask / Handler / XXX / …<br>那为什么现在大家都在用 RxJava呢 ？带着疑问我们来简单说下它的一些用法。</p><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>首先，RxJava的异步实现是通过观察者模式实现的。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式是这样的：A 对象（观察者）对 B 对象（被观察者）的某种变化高度敏感，需要在 B 变化的一瞬间做出反应。举个开发中的例子就是点击监听器<code>OnClickListener</code>,程序中的观察者是采用注册(Register)或者是订阅(Subscribe)的关系来告诉被观察者的。<br>OnClickListener的模式大致如图：<br><img src="http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx42h1wgj20fz03rglt.jpg" alt=""><br>当<code>Button</code>被点击之后，会通过<code>setOnClickListener</code>方法中的<code>OnClick</code>来通知器点击状态的。<br>那么转换成观察者模式就是这样<br><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg" alt=""></p><h3 id="RxJava的观察者模式"><a href="#RxJava的观察者模式" class="headerlink" title="RxJava的观察者模式"></a>RxJava的观察者模式</h3><p>RxJava有这几个概念：<code>Observable</code>(被观察者)、<code>Observer</code>(观察者)、<code>subscribe</code>订阅、事件。<code>Observer</code>和<code>Observable</code>通过<code>subscribe</code>来实现订阅关系。<code>Observable</code>需要的时候通过<code>subscribe</code>来通知<code>Observer</code>。</p><p>RxJava的回调事件有三个：</p><ul><li><code>onNext</code>: 相当于<code>OnClickListener</code>中的<code>OnClick</code>;</li><li><code>onError</code>:事件队列异常。与下面的<code>onCompleted</code>互斥。</li><li><code>onCompleted</code>：事件队列完成。当不会再有<code>onNext</code>发出时，会触发<code>onCompleted</code></li></ul><p>###基本实现<br>(1) Observer</p><p>观察者，决定触发时执行的动作。实现方式：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observer&lt;<span class="built_in">String</span>&gt; observer = <span class="literal">new</span> Observer&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> onCompleted() &#123;</div><div class="line">                <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, <span class="string">"Observer onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> onError(Throwable e) &#123;</div><div class="line">                <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, <span class="string">"Observer onError"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> onNext(<span class="built_in">String</span> s) &#123;</div><div class="line">                <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, <span class="string">"Item "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure><p>此外，还有一种Observer的实现方式 <code>Subscriber</code>,它是observer的一个扩展抽象类。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onStart();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;;</div></pre></td></tr></table></figure><p><code>subscriber</code>比<code>observer</code>多几个方法。这里只说其中的两个：</p><ul><li><code>onStart()</code>它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。如果所要做的操作对于线程有要求，那么这个方法就不适合了。</li><li><code>unsubscribe()</code>用于取消订阅，可以通过<code>isUnsubscribed()</code>来判断下状态。</li></ul><p>(2) Observable</p><p>被观察者，决定什么时候触发以及触发什么事件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void call(<span class="keyword">Subscriber&lt;? </span>super String&gt; <span class="keyword">subscriber) </span>&#123;</div><div class="line">                observer.onNext(<span class="string">"Hi"</span>)<span class="comment">;</span></div><div class="line">                observer.onNext(<span class="string">"who are you"</span>)<span class="comment">;</span></div><div class="line">                observer.onNext(<span class="string">"I am Li"</span>)<span class="comment">;</span></div><div class="line">                observer.onCompleted()<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure><p>(ps: 现在这种方式已经被废弃了)</p><p>还有另几种创建方法：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Observable observable</span> = Observable.just(<span class="string">"Hi"</span>, <span class="string">"Who are you"</span>, <span class="string">"I am Li"</span>);</div></pre></td></tr></table></figure><figure class="highlight golo"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String [] s = &#123;<span class="string">"Hi"</span>, <span class="string">"who are you"</span>, <span class="string">"I am Li"</span>&#125;;</div><div class="line"><span class="keyword">Observable</span> observable1 = <span class="keyword">Observable</span>.from(s);</div></pre></td></tr></table></figure><p>(3) Subscribe (订阅)<br>将<code>Observable</code>和<code>Observer</code>关联起来</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer)<span class="comment">;</span></div></pre></td></tr></table></figure><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><p>你会了上边的那些步骤，并不代表你已经入门了，以为RxJavaz最主要的概念是<code>异步</code>,这样就引出了我们要说的线程控制——Scheduler，比如说我们加载图片，然后显示在屏幕上。这就需要Scheduler了。</p><h4 id="Scheduler的API"><a href="#Scheduler的API" class="headerlink" title="Scheduler的API"></a>Scheduler的API</h4><p>在不指定线程的情况下，RxJava是不会改变线程的。在RxJava中， Scheduler相当于线程控制器，用来指定每段代码多运行在什么样的线程上。来看下它适合哪些场景：</p><ul><li><code>Schedulers.immediate()</code>: 默认的，直接运行在当前线程。</li><li><code>Schedulers.newThread()</code>: 新线程。</li><li><code>Schedulers.io()</code>: I/O线程（读写文件、读写数据库、网络信息交互）</li><li><code>Schedulers.computation()</code>：CPU密集型计算所使用的线程。</li><li><code>AndroidSchedulers.mainThread()</code>: 主线程。</li></ul><p>对线程控制的话，通过<code>subscribeOn()</code>和<code>observeOn()</code>这两个方法</p><ul><li><code>subscribeOn</code>: 指定<code>subscribe</code>所发生的线程。即事件发生的线程。</li><li><code>observeOn</code>：事件消费线程，<code>Subscriber</code>所运行在的线程。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">                .<span class="built_in">map</span>(<span class="literal">new</span> Func1&lt;<span class="built_in">Integer</span>, <span class="built_in">String</span>&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="built_in">String</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="string">""</span> + <span class="built_in">integer</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> s) &#123;</div><div class="line">                        <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure><p>相信有js经验的人会对 <code>.map</code>这种形式比较熟悉，这里的<code>.map</code>会使每个int 转换成string对象返回。这里又引出了另一个类<code>Func1</code>，<code>FuncX</code>和<code>ActionX</code>的区别在于是否有返回值，X代表是几个参数。</p><ul><li><code>map()</code>事件对象直接对换。示意图如下：</li></ul><p><img src="http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4fitvfj20hw0ea0tg.jpg" alt=""></p><p>这里引出一个比较难理解的方法<code>flatMap()</code>，先来看一个例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...;</div><div class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span>(<span class="params">Course course</span>) &#123;</div><div class="line">        Log.d(TAG, course.getName());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">Observable.<span class="keyword">from</span>(students)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span>(<span class="params">Student student</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Observable.<span class="keyword">from</span>(student.getCourses());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure><p>从这个例子中可以看出，<code>flatMap</code>和<code>map</code>一样，都使一个对象转换成另一个对象，但是仔细看会发现，<code>flatMap</code> 返回的是一个 Observable 对象，并且并不是直接放到Subsciber的回调里。</p><p><code>flatMap()</code> 的原理是这样的：</p><ol><li>使用传入的事件对象创建一个 <code>Observable</code>对象；</li><li>并不发送这个 <code>Observable</code>, 而是将它激活，于是它开始发送事件;</li><li>每一个创建出来的 <code>Observable</code> 发送的事件，都被汇入同一个 <code>Observable</code>，而这个 <code>Observable</code> 负责将这些事件统一交给 <code>Subscriber</code> 的回调方法。</li></ol><p>这三个步骤，把事件拆成了两级，通过一组新创建的<code>Observable</code> 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 <code>flatMap()</code> 所谓的 <code>flat</code>。</p><p><code>flatMap()</code>示意图：<br><img src="http://ww1.sinaimg.cn/mw1024/52eb2279jw1f2rx4i8da2j20hg0dydgx.jpg" alt="图片来自网络"></p><p><code>flatMap()</code>常用于嵌套的异步操作中</p><p>其实还有很多其他的变换方式，这里就不一一说了，他们的共同点在于对世间序列的封装处理和再发送。在RxJava内部，它们都基于一个方法：<code>lift()</code></p><p>前面说到，利用<code>subscribeOn</code>和<code>observeOn</code>来实现线程控制，让事件的产生和消费在不同的线程中。那么，能否多次切换线程呢。答案是可以的。我们通过图开说下两者的原理</p><p><code>subscribeOn()</code> 原理图：<br><img src="http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rxcynbsuj20ha0d7wg2.jpg" alt=""></p><p><code>observeOn()</code> 原理图：<br><img src="http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rxd05lttj20hj0cyabl.jpg" alt=""></p><p>从图中可以看出两者线程切换的不同。<code>subscribeOn()</code> 的线程切换发生在 <code>OnSubscribe</code> 中，即在它通知上一级 <code>OnSubscribe</code> 时，这时事件还没有开始发送，因此 <code>subscribeOn()</code> 的线程控制可以从事件发出的开端就造成影响；而 <code>observeOn()</code> 的线程切换则发生在它内建的 <code>Subscriber</code> 中，即发生在它即将给下一级 <code>Subscriber</code> 发送事件时，因此 <code>observeOn()</code> 控制的是它后面的线程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于了解的比较晚，所以只能浅显的说下它的基本用法和原理。现在来说，开源的时代已经来了，所以没事的话，可以多看看其源码。<br>（ps: atlas刚昨天开源，有兴趣的可以去看看 <a href="http://atlas.taobao.org/docs/" target="_blank" rel="external">atlas</a>）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自打进入公司以来，一直用的是React Native，以及 React + WebView的结构来写代码，对原生的一些知识学习落后了许多。老是听朋友说什么 RxJava，一脸懵逼。现在，趁闲暇之时，补充下Android知识，在这里简单说下对RxJava的理解。&lt;/p&gt;
&lt;p&gt;在开始之前呢，先要说下其github以及要依赖的包，由于现在 RxJava2已经有了一段时间了，但是对于小白的我来说，还是先从1开始吧。&lt;/p&gt;
&lt;p&gt;GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;https://github.com/ReactiveX/RxJava&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxAndroid&quot;&gt;https://github.com/ReactiveX/RxAndroid&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.imemv.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github,搭建自己的个人博客</title>
    <link href="http://blog.imemv.com/2017/03/11/hexo-github/"/>
    <id>http://blog.imemv.com/2017/03/11/hexo-github/</id>
    <published>2017-03-11T09:19:24.000Z</published>
    <updated>2017-10-11T06:15:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>我将这篇文章，作为我的第一篇文章，是为了记录下来自己搭建这个博客的点滴（ps: 方便回忆）。<br>前几天，看见同事在弄这个，于是乎，自己也搭一个玩玩。经过各种查找资料，各种踩坑之后，终于搭建好了hexo，我的hexo是3.2.0版本的。</p><p>之前有想过写博客，一方面是做笔记，俗话说好脑子不如烂笔头嘛，另一方面就是提高自己的总结能力以及表述能力。现在看好多人都用hexo来弄，还有的用的是Jekyll搭的，有需要的可以去搜搜。好了，下面开始上搭建的步骤。<br><a id="more"></a></p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>安装 Node （*）</p><p>作用：用来生成静态的页面</p><p>node的安装步骤我就不说了，需要的话可以去<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>。</p><p>安装 Git（*）</p><p> 作用：把部署的东西提交到github上</p><p> 好了，这两个安装好了之后，我们还需要有一个github的账号。点击上角的加号。</p><p> 点击”New repository”，新建一个版本库</p><p> <img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/hexo-github1.png" alt=""></p><p> 输入Repository name:yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了)</p><p> <img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/hexo-github2.png" alt=""></p><p> 创建完版本库之后，如图： 我们要用到它的ssh。到此 github配置久完成了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>首先创建一个文件夹，我这里建的是<code>blog</code>,用户存放hexo配置的文件<br>接下来</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd blog</div><div class="line"><span class="variable">$ </span>npm install -g hexo</div></pre></td></tr></table></figure><p> 我用的是npm 你也可以用淘宝的镜像 cnpm， 安装完成之后要对其初始化</p> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo init</div></pre></td></tr></table></figure><p> 到此，安装工作就全部完成了，<code>blog</code>就是你以后博客的根目录了。</p><p> 生成静态文件</p> <figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">generate</span> <span class="variable">#(hexo -g  也可以)</span></div></pre></td></tr></table></figure><p> 生成本地服务器</p> <figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">server</span></div></pre></td></tr></table></figure><p> 在浏览器中输入 <code>http://localhost:4000</code>,就可以看到一个初始化的页面了</p><p> <img src="http://7xjzgy.com1.z0.glb.clouddn.com/image/20150701/hexo20150701029.png" alt=""></p><h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><p>我们打来我们之前建的文件 <code>blog</code>可以看到里面的东西：</p><p><img src="https://raw.githubusercontent.com/lennyup/img-warehouse/master/hexo-github3.png" alt=""></p><p>现在我们需要和github建立关联，打开<code>_config.yml</code>文件，到最下面，改成这个样子：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">     <span class="attribute">type</span>: git</div><div class="line">     <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/lennyup/lennyup.github.io.git</span></div><div class="line">     <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure><p> repo后面是之前我们说过的版本库的ssh，改成自己的就可以了。</p><p> 然后呢，我们需要下载一个关于git的一个插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure><p> 安装完成后，最后一步的命令是：<code>$ hexo deploy</code></p><p>  见证奇迹的时刻来了，在浏览器中输入<a href="https://lennyup.github.io/" target="_blank" rel="external">https://lennyup.github.io/</a>, 把<code>lennyup</code>换成你自己的账户名就好了。打开后，我们搭建的个人博客就完成了（ps: 简单吗？）<br>每次部署的时候要执行三部：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure><p> 在这里，简单说下一些常用的命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span><span class="string">"postName"</span> <span class="meta">#新建文章</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> page<span class="string">"pageName"</span> <span class="meta">#新建页面</span></div><div class="line"></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line"></div><div class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line"></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></div><div class="line"></div><div class="line">hexo help <span class="meta"># 查看帮助</span></div><div class="line"></div><div class="line">hexo version <span class="meta">#查看Hexo的版本</span></div></pre></td></tr></table></figure><p> 还有一个主意的点，<code>hexo new &quot;postName</code> 命令之后，可以在我们的<code>blog/source/_post</code>目录下找到我们新的文章，然后用<code>MarkDown</code> 语法来编写你的文章吧，关于<code>MarkDown</code>的语法可以看这里<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">参考一</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>大部分主题在这里<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">here</a>，<br>里面有详细的使用方法<br>换主题的话在这里，打开<code>_config.yml</code>，找到theme,换成自己想要换的就行了（ps: theme文件里有你要换的主题文件夹）</p><h2 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h2><p>打开<code>blog/theme/yourtheme</code>里面有个<code>_config.yml</code>文件，</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">img:</span></div><div class="line">...</div><div class="line"><span class="symbol">avatar:</span></div></pre></td></tr></table></figure><p>把<code>avatar</code>后面的改成自己的就好了</p><h2 id="配置文件简述"><a href="#配置文件简述" class="headerlink" title="配置文件简述"></a>配置文件简述</h2><p>可以看出大多数的修改都是在 <code>blog/_config.yml</code>这个文件。这里简单说下它里面的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#博客名称</span></div><div class="line"><span class="attr">title:</span> <span class="string">我的博客</span></div><div class="line"><span class="comment">#副标题</span></div><div class="line"><span class="attr">subtitle:</span></div><div class="line"><span class="comment">#简介</span></div><div class="line"><span class="attr">description:</span></div><div class="line"><span class="comment">#博客作者</span></div><div class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></div><div class="line"><span class="comment">#博客语言</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div><div class="line"><span class="comment">#时区</span></div><div class="line"><span class="attr">timezone:</span></div><div class="line"></div><div class="line"><span class="comment">#博客地址,与申请的GitHub一致</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://lennyup.github.io</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="comment">#博客链接格式</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment">#日期格式</span></div><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div><div class="line"></div><div class="line"><span class="comment">#分页，每页文章数量</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></div><div class="line"></div><div class="line"><span class="comment">#博客主题</span></div><div class="line"><span class="attr">theme:</span> <span class="string">landscape</span></div><div class="line"></div><div class="line"><span class="comment">#发布设置</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line">  <span class="comment">#lennyup改为你的github用户名</span></div><div class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/lennyup/lennyup.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，基本的一些内容已经介绍完了，关于主题的一些更炫酷的设置，就要看响应主题的使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我将这篇文章，作为我的第一篇文章，是为了记录下来自己搭建这个博客的点滴（ps: 方便回忆）。&lt;br&gt;前几天，看见同事在弄这个，于是乎，自己也搭一个玩玩。经过各种查找资料，各种踩坑之后，终于搭建好了hexo，我的hexo是3.2.0版本的。&lt;/p&gt;
&lt;p&gt;之前有想过写博客，一方面是做笔记，俗话说好脑子不如烂笔头嘛，另一方面就是提高自己的总结能力以及表述能力。现在看好多人都用hexo来弄，还有的用的是Jekyll搭的，有需要的可以去搜搜。好了，下面开始上搭建的步骤。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.imemv.com/tags/hexo/"/>
    
  </entry>
  
</feed>
